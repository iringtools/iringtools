//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4005
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace DbDictionaryEditor.ServiceRef {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScopeProject", Namespace="http://schemas.datacontract.org/2004/07/org.iringtools.library")]
    public partial class ScopeProject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string DescriptionField;
        
        private System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeApplication> ApplicationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeApplication> Applications {
            get {
                return this.ApplicationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationsField, value) != true)) {
                    this.ApplicationsField = value;
                    this.RaisePropertyChanged("Applications");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScopeApplication", Namespace="http://schemas.datacontract.org/2004/07/org.iringtools.library")]
    public partial class ScopeApplication : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string DescriptionField;
        
        private bool hasDTOLayerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public bool hasDTOLayer {
            get {
                return this.hasDTOLayerField;
            }
            set {
                if ((this.hasDTOLayerField.Equals(value) != true)) {
                    this.hasDTOLayerField = value;
                    this.RaisePropertyChanged("hasDTOLayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Response", Namespace="http://schemas.datacontract.org/2004/07/org.iringtools.library", ItemName="string")]
    public class Response : System.Collections.ObjectModel.ObservableCollection<string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IDbDictionaryService")]
    public interface IDbDictionaryService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/GetScopes", ReplyAction="http://tempuri.org/IDbDictionaryService/GetScopesResponse")]
        System.IAsyncResult BeginGetScopes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject> EndGetScopes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/GetDbDictionary", ReplyAction="http://tempuri.org/IDbDictionaryService/GetDbDictionaryResponse")]
        System.IAsyncResult BeginGetDbDictionary(string project, string application, System.AsyncCallback callback, object asyncState);
        
        org.iringtools.library.DatabaseDictionary EndGetDbDictionary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/GetDatabaseSchema", ReplyAction="http://tempuri.org/IDbDictionaryService/GetDatabaseSchemaResponse")]
        System.IAsyncResult BeginGetDatabaseSchema(string connString, string dbProvider, System.AsyncCallback callback, object asyncState);
        
        org.iringtools.library.DatabaseDictionary EndGetDatabaseSchema(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/SaveDabaseDictionary", ReplyAction="http://tempuri.org/IDbDictionaryService/SaveDabaseDictionaryResponse")]
        System.IAsyncResult BeginSaveDabaseDictionary(org.iringtools.library.DatabaseDictionary dict, string project, string application, System.AsyncCallback callback, object asyncState);
        
        void EndSaveDabaseDictionary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/GetExistingDbDictionaryFiles", ReplyAction="http://tempuri.org/IDbDictionaryService/GetExistingDbDictionaryFilesResponse")]
        System.IAsyncResult BeginGetExistingDbDictionaryFiles(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetExistingDbDictionaryFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/GetProviders", ReplyAction="http://tempuri.org/IDbDictionaryService/GetProvidersResponse")]
        System.IAsyncResult BeginGetProviders(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetProviders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/PostDictionaryToAdapterService", ReplyAction="http://tempuri.org/IDbDictionaryService/PostDictionaryToAdapterServiceResponse")]
        System.IAsyncResult BeginPostDictionaryToAdapterService(string projectName, string applicationName, System.AsyncCallback callback, object asyncState);
        
        DbDictionaryEditor.ServiceRef.Response EndPostDictionaryToAdapterService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/ClearTripleStore", ReplyAction="http://tempuri.org/IDbDictionaryService/ClearTripleStoreResponse")]
        System.IAsyncResult BeginClearTripleStore(string projectName, string applicationName, System.AsyncCallback callback, object asyncState);
        
        DbDictionaryEditor.ServiceRef.Response EndClearTripleStore(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDbDictionaryService/DeleteApp", ReplyAction="http://tempuri.org/IDbDictionaryService/DeleteAppResponse")]
        System.IAsyncResult BeginDeleteApp(string ProjectName, string applicationName, System.AsyncCallback callback, object asyncState);
        
        DbDictionaryEditor.ServiceRef.Response EndDeleteApp(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDbDictionaryServiceChannel : DbDictionaryEditor.ServiceRef.IDbDictionaryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetScopesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDbDictionaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDbDictionaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public org.iringtools.library.DatabaseDictionary Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((org.iringtools.library.DatabaseDictionary)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDatabaseSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDatabaseSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public org.iringtools.library.DatabaseDictionary Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((org.iringtools.library.DatabaseDictionary)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetExistingDbDictionaryFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExistingDbDictionaryFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PostDictionaryToAdapterServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostDictionaryToAdapterServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DbDictionaryEditor.ServiceRef.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DbDictionaryEditor.ServiceRef.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ClearTripleStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearTripleStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DbDictionaryEditor.ServiceRef.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DbDictionaryEditor.ServiceRef.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DbDictionaryEditor.ServiceRef.Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DbDictionaryEditor.ServiceRef.Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DbDictionaryServiceClient : System.ServiceModel.ClientBase<DbDictionaryEditor.ServiceRef.IDbDictionaryService>, DbDictionaryEditor.ServiceRef.IDbDictionaryService {
        
        private BeginOperationDelegate onBeginGetScopesDelegate;
        
        private EndOperationDelegate onEndGetScopesDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDbDictionaryDelegate;
        
        private EndOperationDelegate onEndGetDbDictionaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetDbDictionaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDatabaseSchemaDelegate;
        
        private EndOperationDelegate onEndGetDatabaseSchemaDelegate;
        
        private System.Threading.SendOrPostCallback onGetDatabaseSchemaCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveDabaseDictionaryDelegate;
        
        private EndOperationDelegate onEndSaveDabaseDictionaryDelegate;
        
        private System.Threading.SendOrPostCallback onSaveDabaseDictionaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExistingDbDictionaryFilesDelegate;
        
        private EndOperationDelegate onEndGetExistingDbDictionaryFilesDelegate;
        
        private System.Threading.SendOrPostCallback onGetExistingDbDictionaryFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProvidersDelegate;
        
        private EndOperationDelegate onEndGetProvidersDelegate;
        
        private System.Threading.SendOrPostCallback onGetProvidersCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostDictionaryToAdapterServiceDelegate;
        
        private EndOperationDelegate onEndPostDictionaryToAdapterServiceDelegate;
        
        private System.Threading.SendOrPostCallback onPostDictionaryToAdapterServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearTripleStoreDelegate;
        
        private EndOperationDelegate onEndClearTripleStoreDelegate;
        
        private System.Threading.SendOrPostCallback onClearTripleStoreCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAppDelegate;
        
        private EndOperationDelegate onEndDeleteAppDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAppCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DbDictionaryServiceClient() {
        }
        
        public DbDictionaryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DbDictionaryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DbDictionaryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DbDictionaryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetScopesCompletedEventArgs> GetScopesCompleted;
        
        public event System.EventHandler<GetDbDictionaryCompletedEventArgs> GetDbDictionaryCompleted;
        
        public event System.EventHandler<GetDatabaseSchemaCompletedEventArgs> GetDatabaseSchemaCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveDabaseDictionaryCompleted;
        
        public event System.EventHandler<GetExistingDbDictionaryFilesCompletedEventArgs> GetExistingDbDictionaryFilesCompleted;
        
        public event System.EventHandler<GetProvidersCompletedEventArgs> GetProvidersCompleted;
        
        public event System.EventHandler<PostDictionaryToAdapterServiceCompletedEventArgs> PostDictionaryToAdapterServiceCompleted;
        
        public event System.EventHandler<ClearTripleStoreCompletedEventArgs> ClearTripleStoreCompleted;
        
        public event System.EventHandler<DeleteAppCompletedEventArgs> DeleteAppCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginGetScopes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject> DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndGetScopes(System.IAsyncResult result) {
            return base.Channel.EndGetScopes(result);
        }
        
        private System.IAsyncResult OnBeginGetScopes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginGetScopes(callback, asyncState);
        }
        
        private object[] OnEndGetScopes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject> retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndGetScopes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopesCompleted(object state) {
            if ((this.GetScopesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopesCompleted(this, new GetScopesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopesAsync() {
            this.GetScopesAsync(null);
        }
        
        public void GetScopesAsync(object userState) {
            if ((this.onBeginGetScopesDelegate == null)) {
                this.onBeginGetScopesDelegate = new BeginOperationDelegate(this.OnBeginGetScopes);
            }
            if ((this.onEndGetScopesDelegate == null)) {
                this.onEndGetScopesDelegate = new EndOperationDelegate(this.OnEndGetScopes);
            }
            if ((this.onGetScopesCompletedDelegate == null)) {
                this.onGetScopesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopesCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopesDelegate, null, this.onEndGetScopesDelegate, this.onGetScopesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginGetDbDictionary(string project, string application, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDbDictionary(project, application, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        org.iringtools.library.DatabaseDictionary DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndGetDbDictionary(System.IAsyncResult result) {
            return base.Channel.EndGetDbDictionary(result);
        }
        
        private System.IAsyncResult OnBeginGetDbDictionary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string project = ((string)(inValues[0]));
            string application = ((string)(inValues[1]));
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginGetDbDictionary(project, application, callback, asyncState);
        }
        
        private object[] OnEndGetDbDictionary(System.IAsyncResult result) {
            org.iringtools.library.DatabaseDictionary retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndGetDbDictionary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDbDictionaryCompleted(object state) {
            if ((this.GetDbDictionaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDbDictionaryCompleted(this, new GetDbDictionaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDbDictionaryAsync(string project, string application) {
            this.GetDbDictionaryAsync(project, application, null);
        }
        
        public void GetDbDictionaryAsync(string project, string application, object userState) {
            if ((this.onBeginGetDbDictionaryDelegate == null)) {
                this.onBeginGetDbDictionaryDelegate = new BeginOperationDelegate(this.OnBeginGetDbDictionary);
            }
            if ((this.onEndGetDbDictionaryDelegate == null)) {
                this.onEndGetDbDictionaryDelegate = new EndOperationDelegate(this.OnEndGetDbDictionary);
            }
            if ((this.onGetDbDictionaryCompletedDelegate == null)) {
                this.onGetDbDictionaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDbDictionaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetDbDictionaryDelegate, new object[] {
                        project,
                        application}, this.onEndGetDbDictionaryDelegate, this.onGetDbDictionaryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginGetDatabaseSchema(string connString, string dbProvider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDatabaseSchema(connString, dbProvider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        org.iringtools.library.DatabaseDictionary DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndGetDatabaseSchema(System.IAsyncResult result) {
            return base.Channel.EndGetDatabaseSchema(result);
        }
        
        private System.IAsyncResult OnBeginGetDatabaseSchema(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connString = ((string)(inValues[0]));
            string dbProvider = ((string)(inValues[1]));
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginGetDatabaseSchema(connString, dbProvider, callback, asyncState);
        }
        
        private object[] OnEndGetDatabaseSchema(System.IAsyncResult result) {
            org.iringtools.library.DatabaseDictionary retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndGetDatabaseSchema(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDatabaseSchemaCompleted(object state) {
            if ((this.GetDatabaseSchemaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDatabaseSchemaCompleted(this, new GetDatabaseSchemaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDatabaseSchemaAsync(string connString, string dbProvider) {
            this.GetDatabaseSchemaAsync(connString, dbProvider, null);
        }
        
        public void GetDatabaseSchemaAsync(string connString, string dbProvider, object userState) {
            if ((this.onBeginGetDatabaseSchemaDelegate == null)) {
                this.onBeginGetDatabaseSchemaDelegate = new BeginOperationDelegate(this.OnBeginGetDatabaseSchema);
            }
            if ((this.onEndGetDatabaseSchemaDelegate == null)) {
                this.onEndGetDatabaseSchemaDelegate = new EndOperationDelegate(this.OnEndGetDatabaseSchema);
            }
            if ((this.onGetDatabaseSchemaCompletedDelegate == null)) {
                this.onGetDatabaseSchemaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDatabaseSchemaCompleted);
            }
            base.InvokeAsync(this.onBeginGetDatabaseSchemaDelegate, new object[] {
                        connString,
                        dbProvider}, this.onEndGetDatabaseSchemaDelegate, this.onGetDatabaseSchemaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginSaveDabaseDictionary(org.iringtools.library.DatabaseDictionary dict, string project, string application, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveDabaseDictionary(dict, project, application, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndSaveDabaseDictionary(System.IAsyncResult result) {
            base.Channel.EndSaveDabaseDictionary(result);
        }
        
        private System.IAsyncResult OnBeginSaveDabaseDictionary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            org.iringtools.library.DatabaseDictionary dict = ((org.iringtools.library.DatabaseDictionary)(inValues[0]));
            string project = ((string)(inValues[1]));
            string application = ((string)(inValues[2]));
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginSaveDabaseDictionary(dict, project, application, callback, asyncState);
        }
        
        private object[] OnEndSaveDabaseDictionary(System.IAsyncResult result) {
            ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndSaveDabaseDictionary(result);
            return null;
        }
        
        private void OnSaveDabaseDictionaryCompleted(object state) {
            if ((this.SaveDabaseDictionaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveDabaseDictionaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveDabaseDictionaryAsync(org.iringtools.library.DatabaseDictionary dict, string project, string application) {
            this.SaveDabaseDictionaryAsync(dict, project, application, null);
        }
        
        public void SaveDabaseDictionaryAsync(org.iringtools.library.DatabaseDictionary dict, string project, string application, object userState) {
            if ((this.onBeginSaveDabaseDictionaryDelegate == null)) {
                this.onBeginSaveDabaseDictionaryDelegate = new BeginOperationDelegate(this.OnBeginSaveDabaseDictionary);
            }
            if ((this.onEndSaveDabaseDictionaryDelegate == null)) {
                this.onEndSaveDabaseDictionaryDelegate = new EndOperationDelegate(this.OnEndSaveDabaseDictionary);
            }
            if ((this.onSaveDabaseDictionaryCompletedDelegate == null)) {
                this.onSaveDabaseDictionaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveDabaseDictionaryCompleted);
            }
            base.InvokeAsync(this.onBeginSaveDabaseDictionaryDelegate, new object[] {
                        dict,
                        project,
                        application}, this.onEndSaveDabaseDictionaryDelegate, this.onSaveDabaseDictionaryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginGetExistingDbDictionaryFiles(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExistingDbDictionaryFiles(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndGetExistingDbDictionaryFiles(System.IAsyncResult result) {
            return base.Channel.EndGetExistingDbDictionaryFiles(result);
        }
        
        private System.IAsyncResult OnBeginGetExistingDbDictionaryFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginGetExistingDbDictionaryFiles(callback, asyncState);
        }
        
        private object[] OnEndGetExistingDbDictionaryFiles(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndGetExistingDbDictionaryFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExistingDbDictionaryFilesCompleted(object state) {
            if ((this.GetExistingDbDictionaryFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExistingDbDictionaryFilesCompleted(this, new GetExistingDbDictionaryFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExistingDbDictionaryFilesAsync() {
            this.GetExistingDbDictionaryFilesAsync(null);
        }
        
        public void GetExistingDbDictionaryFilesAsync(object userState) {
            if ((this.onBeginGetExistingDbDictionaryFilesDelegate == null)) {
                this.onBeginGetExistingDbDictionaryFilesDelegate = new BeginOperationDelegate(this.OnBeginGetExistingDbDictionaryFiles);
            }
            if ((this.onEndGetExistingDbDictionaryFilesDelegate == null)) {
                this.onEndGetExistingDbDictionaryFilesDelegate = new EndOperationDelegate(this.OnEndGetExistingDbDictionaryFiles);
            }
            if ((this.onGetExistingDbDictionaryFilesCompletedDelegate == null)) {
                this.onGetExistingDbDictionaryFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExistingDbDictionaryFilesCompleted);
            }
            base.InvokeAsync(this.onBeginGetExistingDbDictionaryFilesDelegate, null, this.onEndGetExistingDbDictionaryFilesDelegate, this.onGetExistingDbDictionaryFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginGetProviders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProviders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndGetProviders(System.IAsyncResult result) {
            return base.Channel.EndGetProviders(result);
        }
        
        private System.IAsyncResult OnBeginGetProviders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginGetProviders(callback, asyncState);
        }
        
        private object[] OnEndGetProviders(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndGetProviders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProvidersCompleted(object state) {
            if ((this.GetProvidersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProvidersCompleted(this, new GetProvidersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProvidersAsync() {
            this.GetProvidersAsync(null);
        }
        
        public void GetProvidersAsync(object userState) {
            if ((this.onBeginGetProvidersDelegate == null)) {
                this.onBeginGetProvidersDelegate = new BeginOperationDelegate(this.OnBeginGetProviders);
            }
            if ((this.onEndGetProvidersDelegate == null)) {
                this.onEndGetProvidersDelegate = new EndOperationDelegate(this.OnEndGetProviders);
            }
            if ((this.onGetProvidersCompletedDelegate == null)) {
                this.onGetProvidersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProvidersCompleted);
            }
            base.InvokeAsync(this.onBeginGetProvidersDelegate, null, this.onEndGetProvidersDelegate, this.onGetProvidersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginPostDictionaryToAdapterService(string projectName, string applicationName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostDictionaryToAdapterService(projectName, applicationName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DbDictionaryEditor.ServiceRef.Response DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndPostDictionaryToAdapterService(System.IAsyncResult result) {
            return base.Channel.EndPostDictionaryToAdapterService(result);
        }
        
        private System.IAsyncResult OnBeginPostDictionaryToAdapterService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginPostDictionaryToAdapterService(projectName, applicationName, callback, asyncState);
        }
        
        private object[] OnEndPostDictionaryToAdapterService(System.IAsyncResult result) {
            DbDictionaryEditor.ServiceRef.Response retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndPostDictionaryToAdapterService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostDictionaryToAdapterServiceCompleted(object state) {
            if ((this.PostDictionaryToAdapterServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostDictionaryToAdapterServiceCompleted(this, new PostDictionaryToAdapterServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostDictionaryToAdapterServiceAsync(string projectName, string applicationName) {
            this.PostDictionaryToAdapterServiceAsync(projectName, applicationName, null);
        }
        
        public void PostDictionaryToAdapterServiceAsync(string projectName, string applicationName, object userState) {
            if ((this.onBeginPostDictionaryToAdapterServiceDelegate == null)) {
                this.onBeginPostDictionaryToAdapterServiceDelegate = new BeginOperationDelegate(this.OnBeginPostDictionaryToAdapterService);
            }
            if ((this.onEndPostDictionaryToAdapterServiceDelegate == null)) {
                this.onEndPostDictionaryToAdapterServiceDelegate = new EndOperationDelegate(this.OnEndPostDictionaryToAdapterService);
            }
            if ((this.onPostDictionaryToAdapterServiceCompletedDelegate == null)) {
                this.onPostDictionaryToAdapterServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostDictionaryToAdapterServiceCompleted);
            }
            base.InvokeAsync(this.onBeginPostDictionaryToAdapterServiceDelegate, new object[] {
                        projectName,
                        applicationName}, this.onEndPostDictionaryToAdapterServiceDelegate, this.onPostDictionaryToAdapterServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginClearTripleStore(string projectName, string applicationName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearTripleStore(projectName, applicationName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DbDictionaryEditor.ServiceRef.Response DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndClearTripleStore(System.IAsyncResult result) {
            return base.Channel.EndClearTripleStore(result);
        }
        
        private System.IAsyncResult OnBeginClearTripleStore(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginClearTripleStore(projectName, applicationName, callback, asyncState);
        }
        
        private object[] OnEndClearTripleStore(System.IAsyncResult result) {
            DbDictionaryEditor.ServiceRef.Response retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndClearTripleStore(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearTripleStoreCompleted(object state) {
            if ((this.ClearTripleStoreCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearTripleStoreCompleted(this, new ClearTripleStoreCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearTripleStoreAsync(string projectName, string applicationName) {
            this.ClearTripleStoreAsync(projectName, applicationName, null);
        }
        
        public void ClearTripleStoreAsync(string projectName, string applicationName, object userState) {
            if ((this.onBeginClearTripleStoreDelegate == null)) {
                this.onBeginClearTripleStoreDelegate = new BeginOperationDelegate(this.OnBeginClearTripleStore);
            }
            if ((this.onEndClearTripleStoreDelegate == null)) {
                this.onEndClearTripleStoreDelegate = new EndOperationDelegate(this.OnEndClearTripleStore);
            }
            if ((this.onClearTripleStoreCompletedDelegate == null)) {
                this.onClearTripleStoreCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearTripleStoreCompleted);
            }
            base.InvokeAsync(this.onBeginClearTripleStoreDelegate, new object[] {
                        projectName,
                        applicationName}, this.onEndClearTripleStoreDelegate, this.onClearTripleStoreCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DbDictionaryEditor.ServiceRef.IDbDictionaryService.BeginDeleteApp(string ProjectName, string applicationName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteApp(ProjectName, applicationName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DbDictionaryEditor.ServiceRef.Response DbDictionaryEditor.ServiceRef.IDbDictionaryService.EndDeleteApp(System.IAsyncResult result) {
            return base.Channel.EndDeleteApp(result);
        }
        
        private System.IAsyncResult OnBeginDeleteApp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ProjectName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            return ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).BeginDeleteApp(ProjectName, applicationName, callback, asyncState);
        }
        
        private object[] OnEndDeleteApp(System.IAsyncResult result) {
            DbDictionaryEditor.ServiceRef.Response retVal = ((DbDictionaryEditor.ServiceRef.IDbDictionaryService)(this)).EndDeleteApp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAppCompleted(object state) {
            if ((this.DeleteAppCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAppCompleted(this, new DeleteAppCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAppAsync(string ProjectName, string applicationName) {
            this.DeleteAppAsync(ProjectName, applicationName, null);
        }
        
        public void DeleteAppAsync(string ProjectName, string applicationName, object userState) {
            if ((this.onBeginDeleteAppDelegate == null)) {
                this.onBeginDeleteAppDelegate = new BeginOperationDelegate(this.OnBeginDeleteApp);
            }
            if ((this.onEndDeleteAppDelegate == null)) {
                this.onEndDeleteAppDelegate = new EndOperationDelegate(this.OnEndDeleteApp);
            }
            if ((this.onDeleteAppCompletedDelegate == null)) {
                this.onDeleteAppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAppCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAppDelegate, new object[] {
                        ProjectName,
                        applicationName}, this.onEndDeleteAppDelegate, this.onDeleteAppCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DbDictionaryEditor.ServiceRef.IDbDictionaryService CreateChannel() {
            return new DbDictionaryServiceClientChannel(this);
        }
        
        private class DbDictionaryServiceClientChannel : ChannelBase<DbDictionaryEditor.ServiceRef.IDbDictionaryService>, DbDictionaryEditor.ServiceRef.IDbDictionaryService {
            
            public DbDictionaryServiceClientChannel(System.ServiceModel.ClientBase<DbDictionaryEditor.ServiceRef.IDbDictionaryService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetScopes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetScopes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject> EndGetScopes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject> _result = ((System.Collections.ObjectModel.ObservableCollection<DbDictionaryEditor.ServiceRef.ScopeProject>)(base.EndInvoke("GetScopes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDbDictionary(string project, string application, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = project;
                _args[1] = application;
                System.IAsyncResult _result = base.BeginInvoke("GetDbDictionary", _args, callback, asyncState);
                return _result;
            }
            
            public org.iringtools.library.DatabaseDictionary EndGetDbDictionary(System.IAsyncResult result) {
                object[] _args = new object[0];
                org.iringtools.library.DatabaseDictionary _result = ((org.iringtools.library.DatabaseDictionary)(base.EndInvoke("GetDbDictionary", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDatabaseSchema(string connString, string dbProvider, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = connString;
                _args[1] = dbProvider;
                System.IAsyncResult _result = base.BeginInvoke("GetDatabaseSchema", _args, callback, asyncState);
                return _result;
            }
            
            public org.iringtools.library.DatabaseDictionary EndGetDatabaseSchema(System.IAsyncResult result) {
                object[] _args = new object[0];
                org.iringtools.library.DatabaseDictionary _result = ((org.iringtools.library.DatabaseDictionary)(base.EndInvoke("GetDatabaseSchema", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveDabaseDictionary(org.iringtools.library.DatabaseDictionary dict, string project, string application, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = dict;
                _args[1] = project;
                _args[2] = application;
                System.IAsyncResult _result = base.BeginInvoke("SaveDabaseDictionary", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSaveDabaseDictionary(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SaveDabaseDictionary", _args, result);
            }
            
            public System.IAsyncResult BeginGetExistingDbDictionaryFiles(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetExistingDbDictionaryFiles", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetExistingDbDictionaryFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetExistingDbDictionaryFiles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProviders(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetProviders", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetProviders(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetProviders", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPostDictionaryToAdapterService(string projectName, string applicationName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = projectName;
                _args[1] = applicationName;
                System.IAsyncResult _result = base.BeginInvoke("PostDictionaryToAdapterService", _args, callback, asyncState);
                return _result;
            }
            
            public DbDictionaryEditor.ServiceRef.Response EndPostDictionaryToAdapterService(System.IAsyncResult result) {
                object[] _args = new object[0];
                DbDictionaryEditor.ServiceRef.Response _result = ((DbDictionaryEditor.ServiceRef.Response)(base.EndInvoke("PostDictionaryToAdapterService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClearTripleStore(string projectName, string applicationName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = projectName;
                _args[1] = applicationName;
                System.IAsyncResult _result = base.BeginInvoke("ClearTripleStore", _args, callback, asyncState);
                return _result;
            }
            
            public DbDictionaryEditor.ServiceRef.Response EndClearTripleStore(System.IAsyncResult result) {
                object[] _args = new object[0];
                DbDictionaryEditor.ServiceRef.Response _result = ((DbDictionaryEditor.ServiceRef.Response)(base.EndInvoke("ClearTripleStore", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteApp(string ProjectName, string applicationName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ProjectName;
                _args[1] = applicationName;
                System.IAsyncResult _result = base.BeginInvoke("DeleteApp", _args, callback, asyncState);
                return _result;
            }
            
            public DbDictionaryEditor.ServiceRef.Response EndDeleteApp(System.IAsyncResult result) {
                object[] _args = new object[0];
                DbDictionaryEditor.ServiceRef.Response _result = ((DbDictionaryEditor.ServiceRef.Response)(base.EndInvoke("DeleteApp", _args, result)));
                return _result;
            }
        }
    }
}
