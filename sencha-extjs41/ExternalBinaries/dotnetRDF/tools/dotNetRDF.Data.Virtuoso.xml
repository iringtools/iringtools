<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotNetRDF.Data.Virtuoso</name>
    </assembly>
    <members>
        <member name="T:VDS.RDF.Storage.NonNativeVirtuosoManager">
            <summary>
            A <see cref="T:VDS.RDF.Storage.ISqlIOManager">ISqlIOManager</see> implementation which uses a Virtual Database from Virtuoso Universal Server as the backing store
            </summary>
            <threadsafety instance="true">
            <para>
            Designed to be Thread safe for concurrent read and write access
            </para>
            <para>
            <strong>Note:</strong> To ensure correct behaviour for multi-threaded writing you must set the <see cref="P:VDS.RDF.Storage.BaseStoreManager.DisableTransactions">DisableTransactions</see> property to be true.  Classes which are designed specifically to do multi-threaded writing will <em>usually</em> set this automatically.
            </para>
            <para>
            Will only be thread safe for writing if all the classes writing to the database are using a single instance of this Manager.
            </para>
            </threadsafety>
            <remarks>
            Since there is no way of knowing what the underlying Database of a Virtual Database in Virtuoso is this Manager cannot automatically create the dotNetRDF Store since it does not know which SQL Setup script to use.  You <strong>must</strong> configure your virtual database yourself before using this Manager to access it.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the Non-Native Virtuoso Manager
            </summary>
            <param name="server">Server</param>
            <param name="port">Port</param>
            <param name="db">Database Name</param>
            <param name="user">Username</param>
            <param name="password">Password</param>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the Non-Native Virtuoso Manager
            </summary>
            <param name="server">Server</param>
            <param name="db">Database Name</param>
            <param name="user">Username</param>
            <param name="password">Password</param>
            <remarks>Assumes the Database uses the default port of <strong>1111</strong></remarks>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the Non-Native Virtuoso Manager
            </summary>
            <param name="db">Database Name</param>
            <param name="user">Username</param>
            <param name="password">Password</param>
            <remarks>Assumes the Database is on the <strong>localhost</strong> and uses the default port of <strong>1111</strong></remarks>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.Open(System.Boolean)">
            <summary>
            Opens a Connection to the Database
            </summary>
            <param name="keepOpen">Indicates that the Connection should be kept open and a Transaction started</param>
            <remarks>A Connection and Transaction per Thread are used</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.Close(System.Boolean,System.Boolean)">
            <summary>
            Closes the Connection to the Database
            </summary>
            <param name="forceClose">Indicates that the connection should be closed even if keepOpen was specified when the Connection was opened</param>
            <param name="rollbackTrans">Indicates that the Transaction should be rolled back because something has gone wrong</param>
            <remarks>A Connection and Transaction per Thread are used</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.ExecuteNonQuery(System.String)">
            <summary>
            Executes a Non-Query SQL Command against the database
            </summary>
            <param name="sqlCmd">SQL Command</param>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.ExecuteQuery(System.String)">
            <summary>
            Executes a Query SQL Command against the database and returns a DataTable
            </summary>
            <param name="sqlCmd">SQL Command</param>
            <returns>DataTable of results</returns>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.ExecuteQuery(System.String,System.Data.DataTable)">
            <summary>
            Executes a Query SQL Command against the database and fills the supplied DataTable with the results
            </summary>
            <param name="sqlCmd">SQL Command</param>
            <param name="data">DataTable to fill with results</param>
            <remarks>Allows for queries which wish to strongly type the results for quicker reading</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.ExecuteStreamingQuery(System.String)">
            <summary>
            Executes a Query SQL Command against the database and returns the results in a streaming fashion
            </summary>
            <param name="sqlCmd">SQL Command</param>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.ExecuteScalar(System.String)">
            <summary>
            Executes a Query SQL Command against the database and returns the scalar result (first column of first row of the result)
            </summary>
            <param name="sqlCmd">SQL Command</param>
            <returns>First Column of First Row of the Results</returns>
        </member>
        <member name="M:VDS.RDF.Storage.NonNativeVirtuosoManager.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration
            </summary>
            <param name="context">Configuration Serialization Context</param>
        </member>
        <member name="T:VDS.RDF.Storage.VirtuosoManager">
            <summary>
            A Manager for accessing the Native Virtuoso Quad Store
            </summary>
            <remarks>
            <para>
            This class implements <see cref="T:VDS.RDF.Storage.IGenericIOManager">IGenericIOManager</see> allowing it to be used with any of the general classes that support this interface as well as the Virtuoso specific classes.
            </para>
            <para>
            Although this class takes a Database Name to ensure compatability with any Virtuoso installation (i.e. this allows for the Native Quad Store to be in a non-standard database) generally you should always specify <strong>DB</strong> as the Database Name parameter
            </para>
            <para>
            Virtuoso automatically assigns IDs to Blank Nodes input into it, these IDs are <strong>not</strong> based on the actual Blank Node ID so inputting a Blank Node with the same ID multiple times will result in multiple Nodes being created in Virtuoso.  This means that data containing Blank Nodes which is stored to Virtuoso and then retrieved will have different Blank Node IDs to those input.  In addition there is no guarentee that when you save a Graph containing Blank Nodes into Virtuoso that retrieving it will give the same Blank Node IDs even if the Graph being saved was originally retrieved from Virtuoso.
            </para>
            <para>
            You can use a null Uri or an empty String as a Uri to indicate that operations should affect the Default Graph.  Where the argument is only a Graph a null <see cref="P:VDS.RDF.IGraph.BaseUri">BaseUri</see> property indicates that the Graph affects the Default Graph
            </para>
            </remarks>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager.DefaultPort">
            <summary>
            Default Port for Virtuoso Servers
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager.DefaultDB">
            <summary>
            Default Database for Virtuoso Server Quad Store
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager._dbserver">
            <summary>
            Variables for Database Connection Properties
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager._dbname">
            <summary>
            Variables for Database Connection Properties
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager._dbuser">
            <summary>
            Variables for Database Connection Properties
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager._dbpwd">
            <summary>
            Variables for Database Connection Properties
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager._dbport">
            <summary>
            Database Port
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.VirtuosoManager._keepOpen">
            <summary>
            Indicates whether the Database Connection is currently being kept open
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a Manager for a Virtuoso Native Quad Store
            </summary>
            <param name="server">Server</param>
            <param name="port">Port</param>
            <param name="db">Database Name</param>
            <param name="user">Username</param>
            <param name="password">Password</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a Manager for a Virtuoso Native Quad Store
            </summary>
            <param name="db">Database Name</param>
            <param name="user">Username</param>
            <param name="password">Password</param>
            <remarks>
            Assumes the Server is on the localhost and the port is the default installation port of 1111
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.#ctor(System.String)">
            <summary>
            Creates a Manager for a Virtuoso Native Quad Store
            </summary>
            <param name="connectionString">Connection String</param>
            <remarks>
            Allows the end user to specify a customised connection string
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.LoadGraph(VDS.RDF.IGraph,System.Uri)">
            <summary>
            Loads a Graph from the Quad Store
            </summary>
            <param name="g">Graph to load into</param>
            <param name="graphUri">URI of the Graph to Load</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.LoadGraph(VDS.RDF.IRdfHandler,System.Uri)">
            <summary>
            Loads a Graph from the Quad Store
            </summary>
            <param name="handler">RDF Handler</param>
            <param name="graphUri">URI of the Graph to Load</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.LoadGraph(VDS.RDF.IGraph,System.String)">
            <summary>
            Loads a Graph from the Quad Store
            </summary>
            <param name="g">Graph to load into</param>
            <param name="graphUri">URI of the Graph to Load</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.LoadGraph(VDS.RDF.IRdfHandler,System.String)">
            <summary>
            Loads a Graph from the Quad Store
            </summary>
            <param name="handler">RDF Handler</param>
            <param name="graphUri">URI of the Graph to Load</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.LoadTriples(System.Uri)">
            <summary>
            Gets a Table of Triples that are in the given Graph
            </summary>
            <param name="graphUri">Graph Uri</param>
            <returns></returns>
            <remarks>
            Assumes that the caller has opened the Database connection
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.LoadNode(VDS.RDF.INodeFactory,System.Object)">
            <summary>
            Decodes an Object into an appropriate Node
            </summary>
            <param name="factory">Node Factory to use to create Node</param>
            <param name="n">Object to convert</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.SaveGraph(VDS.RDF.IGraph)">
            <summary>
            Saves a Graph into the Quad Store (Warning: Completely replaces any existing Graph with the same URI)
            </summary>
            <param name="g">Graph to save</param>
            <remarks>
            Completely replaces any previously saved Graph with the same Graph URI
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.UpdateGraph(System.Uri,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the Quad Store
            </summary>
            <param name="graphUri">Graph Uri of the Graph to update</param>
            <param name="additions">Triples to be added</param>
            <param name="removals">Triples to be removed</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the Quad Store
            </summary>
            <param name="graphUri">Graph Uri of the Graph to update</param>
            <param name="additions">Triples to be added</param>
            <param name="removals">Triples to be removed</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Query(System.String)">
            <summary>
            Executes a SPARQL Query on the native Quad Store
            </summary>
            <param name="sparqlQuery">SPARQL Query to execute</param>
            <returns></returns>
            <remarks>
            <para>
            This method will first attempt to parse the query into a <see cref="T:VDS.RDF.Query.SparqlQuery">SparqlQuery</see> object.  If this succeeds then the Query Type can be used to determine how to handle the response.
            </para>
            <para>
            If the parsing fails then the query will be executed anyway using Virtuoso's SPASQL (SPARQL + SQL) syntax.  Parsing can fail because Virtuoso supports various SPARQL extensions which the library does not support.  These include things like aggregate functions but also SPARUL updates (the non-standard precusor to SPARQL 1.1 Update).
            </para>
            <para>
            If you use an aggregate query which has an Integer, Decimal or Double type result then you will receive a <see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> containing a single <see cref="T:VDS.RDF.Query.SparqlResult">SparqlResult</see> which has contains a binding for a variable named <strong>Result</strong> which contains a <see cref="T:VDS.RDF.LiteralNode">LiteralNode</see> typed to the appropriate datatype.
            </para>
            </remarks>
            <exception cref="T:VDS.RDF.Query.RdfQueryException">Thrown if an error occurs in making the query</exception>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Executes a SPARQL Query on the native Quad Store processing the results with an appropriate handler from those provided
            </summary>
            <param name="rdfHandler">RDF Handler</param>
            <param name="resultsHandler">Results Handler</param>
            <param name="sparqlQuery">SPARQL Query to execute</param>
            <remarks>
            <para>
            This method will first attempt to parse the query into a <see cref="T:VDS.RDF.Query.SparqlQuery">SparqlQuery</see> object.  If this succeeds then the Query Type can be used to determine how to handle the response.
            </para>
            <para>
            If the parsing fails then the query will be executed anyway using Virtuoso's SPASQL (SPARQL + SQL) syntax.  Parsing can fail because Virtuoso supports various SPARQL non-standardised extensions which the library does not support.  These include things like aggregate functions but also SPARUL updates (the non-standard precusor to SPARQL 1.1 Update).
            </para>
            <para>
            If you use an aggregate query which has an Integer, Decimal or Double type result then you will receive a <see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> containing a single <see cref="T:VDS.RDF.Query.SparqlResult">SparqlResult</see> which has contains a binding for a variable named <strong>Result</strong> which contains a <see cref="T:VDS.RDF.LiteralNode">LiteralNode</see> typed to the appropriate datatype.
            </para>
            </remarks>
            <exception cref="T:VDS.RDF.Query.RdfQueryException">Thrown if an error occurs in making the query</exception>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Update(System.String)">
            <summary>
            Executes a SPARQL Update on the native Quad Store
            </summary>
            <param name="sparqlUpdate">SPARQL Update to execute</param>
            <remarks>
            <para>
            This method will first attempt to parse the update into a <see cref="T:VDS.RDF.Update.SparqlUpdateCommandSet">SparqlUpdateCommandSet</see> object.  If this succeeds then each command in the command set will be issued to Virtuoso.
            </para>
            <para>
            If the parsing fails then the update will be executed anyway using Virtuoso's SPASQL (SPARQL + SQL) syntax.  Parsing can fail because Virtuoso supports various SPARQL extensions which the library does not support and primarily supports SPARUL updates (the precusor to SPARQL 1.1 Update).
            </para>
            </remarks>
            <exception cref="T:VDS.RDF.Update.SparqlUpdateException">Thrown if an error occurs in making the update</exception>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.DeleteGraph(System.Uri)">
            <summary>
            Deletes a Graph from the Virtuoso store
            </summary>
            <param name="graphUri">URI of the Graph to delete</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.DeleteGraph(System.String)">
            <summary>
            Deletes a Graph from the store
            </summary>
            <param name="graphUri">URI of the Graph to delete</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.ListGraphs">
            <summary>
            Lists the Graphs in the store
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Open(System.Boolean)">
            <summary>
            Opens a Connection to the Database
            </summary>
            <param name="keepOpen">Indicates that the Connection should be kept open and a Transaction started</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Open(System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Opens a Connection to the Database
            </summary>
            <param name="keepOpen">Indicates that the Connection should be kept open and a Transaction started</param>
            <param name="level">Isolation Level to use</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Close(System.Boolean)">
            <summary>
            Closes the Connection to the Database
            </summary>
            <param name="forceClose">Indicates that the connection should be closed even if keepOpen was specified when the Connection was opened</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Close(System.Boolean,System.Boolean)">
            <summary>
            Closes the Connection to the Database
            </summary>
            <param name="forceClose">Indicates that the connection should be closed even if keepOpen was specified when the Connection was opened</param>
            <param name="rollbackTrans">Indicates that the Transaction should be rolled back because something has gone wrong</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.ExecuteNonQuery(System.String)">
            <summary>
            Executes a Non-Query SQL Command against the database
            </summary>
            <param name="sqlCmd">SQL Command</param>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.ExecuteQuery(System.String)">
            <summary>
            Executes a Query SQL Command against the database and returns a DataTable
            </summary>
            <param name="sqlCmd">SQL Command</param>
            <returns>DataTable of results</returns>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.ExecuteScalar(System.String)">
            <summary>
            Executes a Query SQL Command against the database and returns the scalar result (first column of first row of the result)
            </summary>
            <param name="sqlCmd">SQL Command</param>
            <returns>First Column of First Row of the Results</returns>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.Dispose">
            <summary>
            Disposes of the Manager
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.ToString">
            <summary>
            Gets a String which gives details of the Connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.VirtuosoManager.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration
            </summary>
            <param name="context">Configuration Serialization Context</param>
        </member>
        <member name="P:VDS.RDF.Storage.VirtuosoManager.UpdateSupported">
            <summary>
            Indicates that Updates are supported by the Virtuoso Native Quad Store
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.VirtuosoManager.IsReady">
            <summary>
            Returns that the Manager is ready
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.VirtuosoManager.IsReadOnly">
            <summary>
            Returns that the Manager is not read-only
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.VirtuosoManager.DeleteSupported">
            <summary>
            Returns that deleting Graphs is supported
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.VirtuosoManager.ListGraphsSupported">
            <summary>
            Returns that listing graphs is supported
            </summary>
        </member>
        <member name="T:VDS.RDF.Configuration.VirtuosoObjectFactory">
            <summary>
            An Object Factory that can create objects of the classes provided by the dotNetRDF.Data.Virtuoso library
            </summary>
        </member>
        <member name="M:VDS.RDF.Configuration.VirtuosoObjectFactory.TryLoadObject(VDS.RDF.IGraph,VDS.RDF.INode,System.Type,System.Object@)">
            <summary>
            Attempts to load an Object of the given type identified by the given Node and returned as the Type that this loader generates
            </summary>
            <param name="g">Configuration Graph</param>
            <param name="objNode">Object Node</param>
            <param name="targetType">Target Type</param>
            <param name="obj">Created Object</param>
            <returns>True if the loader succeeded in creating an Object</returns>
        </member>
        <member name="M:VDS.RDF.Configuration.VirtuosoObjectFactory.CanLoadObject(System.Type)">
            <summary>
            Returns whether this Factory is capable of creating objects of the given type
            </summary>
            <param name="t">Target Type</param>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Parsing.VirtuosoReader">
            <summary>
            Class for reading RDF Graphs from a Virtuoso Native Quad Store into arbitrary Graphs
            </summary>
        </member>
        <member name="M:VDS.RDF.Parsing.VirtuosoReader.#ctor(VDS.RDF.Storage.VirtuosoManager)">
            <summary>
            Creates a new instance of the Virtuoso Reader which connects to a Virtuoso Native Quad Store using the given Manager
            </summary>
            <param name="manager">Manager for the connection to Virtuoso</param>
        </member>
        <member name="M:VDS.RDF.Parsing.VirtuosoReader.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the Virtuoso Reader which connects to a Virtuoso Native Quad Store using the given Manager
            </summary>
            <param name="dbname">Database Name</param>
            <param name="dbuser">Database User</param>
            <param name="dbpassword">Database Password</param>
            <remarks>Assumes that Virtuoso is installed on the local host using the default port 1111</remarks>
        </member>
        <member name="M:VDS.RDF.Parsing.VirtuosoReader.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the Virtuoso Reader which connects to a Virtuoso Native Quad Store using the given Manager
            </summary>
            <param name="dbserver">Database Server</param>
            <param name="dbport">Database Port</param>
            <param name="dbname">Database Name</param>
            <param name="dbuser">Database User</param>
            <param name="dbpassword">Database Password</param>
        </member>
        <member name="M:VDS.RDF.Parsing.VirtuosoReader.Load(VDS.RDF.IGraph,System.Uri)">
            <summary>
            Loads a Graph from the Native Quad Store
            </summary>
            <param name="g">Graph to load into</param>
            <param name="graphUri">Uri of the Graph to load</param>
        </member>
        <member name="M:VDS.RDF.Parsing.VirtuosoReader.Load(VDS.RDF.IGraph,System.String)">
            <summary>
            Loads a Graph from the Native Quad Store
            </summary>
            <param name="g">Graph to load into</param>
            <param name="graphUri">Uri of the Graph to load</param>
        </member>
        <member name="T:VDS.RDF.VirtuosoTripleStore">
            <summary>
            Class for representing a Virtuoso Native Quad Store and executing queries against it
            </summary>
            <remarks>
            <para>
            No data is automatically loaded into this class when it is instantiated, it acts as a queryable view onto the given Virtuoso Store specified by the given <see cref="T:VDS.RDF.Storage.VirtuosoManager">VirtuosoManager</see>
            </para>
            <para>
            Currently Graphs added/removed from this Class do not affect the Virtuoso Store
            </para>
            <para>
            If you wish to alter the Store you must manipulate the Store directly using the <see cref="T:VDS.RDF.Storage.VirtuosoManager">VirtuosoManager</see> or by issuing SPARQL Update commands using the <see cref="!:VirtuosoTripleStore.ExecuteUpdate()">ExecuteUpdate()</see> method.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.#ctor(VDS.RDF.Storage.VirtuosoManager)">
            <summary>
            Creates a new instance of a Virtuoso Triple Store which uses the given <see cref="T:VDS.RDF.Storage.VirtuosoManager">VirtuosoManager</see> to connect to a Virtuoso Triple Store
            </summary>
            <param name="manager">Manager for the connection to Virtuoso</param>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new Virtuoso Triple Store using the given parameters
            </summary>
            <param name="server">Server</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <remarks>Uses the default port of <strong>1111</strong> and assume the Quad Store is in the default database which is <strong>DB</strong></remarks>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new Virtuoso Triple Store using the given parameters
            </summary>
            <param name="server">Server</param>
            <param name="port">Port</param>
            <param name="db">Database</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.ExecuteQuery(System.String)">
            <summary>
            Executes a SPARQL Query on the Triple Store
            </summary>
            <param name="query">SPARQL Query as unparsed String</param>
            <returns>
            A <see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> or a <see cref="T:VDS.RDF.Graph">Graph</see> if the query is a normal Sparql Query or a null if the query is a Sparql Update command.
            </returns>
            <remarks>
            <para>
            This method invokes the <see cref="M:VDS.RDF.Storage.VirtuosoManager.Query(System.String)">Query</see> method of the <see cref="T:VDS.RDF.Storage.VirtuosoManager">VirtuosoManager</see> which executes the Sparql query against the store using SPASQL (Sparql+SQL).
            </para>
            <para>
            You can use this method to issue SPARQL Update commands against the Store if the user account you are using to connect has the relevant privilege <strong>SPARQL_UPDATE</strong> granted to them, for new development we recommend you use the <see cref="M:VDS.RDF.VirtuosoTripleStore.ExecuteUpdate(System.String)">ExecuteUpdate()</see> method instead.
            </para>
            <para>
            <strong>Warning:</strong> In rare cases we have been able to crash Virtuoso by issuing malformed Sparql Update commands to it, this appears to be an issue with Virtuoso.
            </para>
            </remarks>
            <exception cref="T:VDS.RDF.Query.RdfQueryException">Thrown if the query is malformed or the results cannot be processed</exception>
            <exception cref="T:OpenLink.Data.Virtuoso.VirtuosoException">Thrown if accessing Virtuoso fails in some way</exception>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.ExecuteQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Executes a SPARQL Query on the Triple Store processing the results with an appropriate handler from those provided
            </summary>
            <param name="rdfHandler">RDF Handler</param>
            <param name="resultsHandler">Results Handler</param>
            <param name="query">SPARQL Query as unparsed String</param>
            <returns>
            A <see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> or a <see cref="T:VDS.RDF.Graph">Graph</see> if the query is a normal SPARQL Query or a null if the query is a SPARQL Update command.
            </returns>
            <remarks>
            <para>
            This method invokes the <see cref="M:VDS.RDF.Storage.VirtuosoManager.Query(System.String)">Query</see> method of the <see cref="T:VDS.RDF.Storage.VirtuosoManager">VirtuosoManager</see> which executes the SPARQL query against the store using SPASQL (Sparql+SQL).
            </para>
            <para>
            You can use this method to issue SPARQL Update commands against the Store if the user account you are using to connect has the relevant privilege <strong>SPARQL_UPDATE</strong> granted to them, for new development we recommend you use the <see cref="!:VirtuosoTripleStore.ExecuteUpdate()">ExecuteUpdate()</see> method instead.
            </para>
            <para>
            <strong>Warning:</strong> In rare cases we have been able to crash Virtuoso by issuing malformed Sparql Update commands to it, this appears to be an issue with Virtuoso.
            </para>
            </remarks>
            <exception cref="T:VDS.RDF.Query.RdfQueryException">Thrown if the query is malformed or the results cannot be processed</exception>
            <exception cref="T:OpenLink.Data.Virtuoso.VirtuosoException">Thrown if accessing Virtuoso fails in some way</exception>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.Dispose">
            <summary>
            Disposes of a Virtuoso Triple Store
            </summary>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.ExecuteUpdate(System.String)">
            <summary>
            Executes a SPARQL Update on the Virtuoso store
            </summary>
            <param name="update">SPARQL Update</param>
            <remarks>
            <para>
            <strong>Warning:</strong> In rare cases we have been able to crash Virtuoso by issuing malformed Sparql Update commands to it, this appears to be an issue with Virtuoso.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.ExecuteUpdate(VDS.RDF.Update.SparqlUpdateCommand)">
            <summary>
            Executes a SPARQL Update on the Virtuoso store
            </summary>
            <param name="update">SPARQL Update</param>
            <remarks>
            <para>
            <strong>Warning:</strong> In rare cases we have been able to crash Virtuoso by issuing malformed Sparql Update commands to it, this appears to be an issue with Virtuoso.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.VirtuosoTripleStore.ExecuteUpdate(VDS.RDF.Update.SparqlUpdateCommandSet)">
            <summary>
            Executes a SPARQL Update on the Virtuoso store
            </summary>
            <param name="updates">SPARQL Updates</param>
            <remarks>
            <para>
            <strong>Warning:</strong> In rare cases we have been able to crash Virtuoso by issuing malformed Sparql Update commands to it, this appears to be an issue with Virtuoso.
            </para>
            </remarks>
        </member>
    </members>
</doc>
