{
    "type": "class",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "nhibernate.Utility",
        "designer|userAlias": "nhibernateutility",
        "singleton": true,
        "extend": "Ext.AbstractManager"
    },
    "id": "ExtBox1-ext-gen9791",
    "designerId": "1a271683-7a34-49a9-b59e-89ab4347ee43",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "encode",
                "fn": "encode",
                "designer|params": [
                    "data"
                ],
                "implHandler": [
                    "var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r",
                    "var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\r",
                    "  ac = 0,\r",
                    "  enc = \"\",\r",
                    "  tmpArray = []; \r",
                    "if (!data) {\r",
                    "  return data;\r",
                    "}\r",
                    "data = this.utf8Encode(data + '');\r",
                    "\r",
                    "do { \r",
                    "  o1 = data.charCodeAt(i++);\r",
                    "  o2 = data.charCodeAt(i++);      \r",
                    "  o3 = data.charCodeAt(i++);\r",
                    "\r",
                    "  bits = o1 << 16 | o2 << 8 | o3;\r",
                    "\r",
                    "  h1 = bits >> 18 & 0x3f;       \r",
                    "  h2 = bits >> 12 & 0x3f;\r",
                    "  h3 = bits >> 6 & 0x3f;\r",
                    "  h4 = bits & 0x3f;\r",
                    "       \r",
                    "  tmpArray[ac++] = \r",
                    "    b64.charAt(h1) + \r",
                    "    b64.charAt(h2) + \r",
                    "    b64.charAt(h3) + \r",
                    "    b64.charAt(h4);\r",
                    "} while (i < data.length);\r",
                    "\r",
                    "enc = tmpArray.join('');\r",
                    "var r = data.length % 3;\r",
                    "\r",
                    "return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\r",
                    ""
                ]
            },
            "designerId": "d50bf0df-35a4-484d-9d3e-1024bb5f30c9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "decode",
                "fn": "decode",
                "designer|params": [
                    "data"
                ],
                "implHandler": [
                    "var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r",
                    "var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\r",
                    "  ac = 0,        \r",
                    "  dec = \"\",\r",
                    "  tmpArray = [];\r",
                    "\r",
                    "if (!data) {\r",
                    "  return data;    \r",
                    "}\r",
                    "\r",
                    "data += '';\r",
                    "\r",
                    "do { \r",
                    "  h1 = b64.indexOf(data.charAt(i++));\r",
                    "  h2 = b64.indexOf(data.charAt(i++));\r",
                    "  h3 = b64.indexOf(data.charAt(i++));\r",
                    "  h4 = b64.indexOf(data.charAt(i++));\r",
                    "  bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\r",
                    "\r",
                    "  o1 = bits >> 16 & 0xff;\r",
                    "  o2 = bits >> 8 & 0xff;\r",
                    "  o3 = bits & 0xff; \r",
                    "  if (h3 == 64) {\r",
                    "    tmpArray[ac++] = String.fromCharCode(o1);\r",
                    "  } else if (h4 == 64) {\r",
                    "    tmpArray[ac++] = String.fromCharCode(o1, o2);        \r",
                    "  } else {\r",
                    "    tmpArray[ac++] = String.fromCharCode(o1, o2, o3);\r",
                    "  }\r",
                    "} while (i < data.length);\r",
                    "\r",
                    "dec = tmpArray.join('');\r",
                    "dec = this.utf8Decode(dec);\r",
                    "\r",
                    "return dec;"
                ]
            },
            "designerId": "6fa61e35-f63f-4837-903f-39e846a38791"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "utf8Encode",
                "fn": "utf8Encode",
                "designer|params": [
                    "argString"
                ],
                "implHandler": [
                    "if (argString === null || typeof argString === \"undefined\") {\r",
                    "  return \"\";\r",
                    "}\r",
                    "var string = (argString + ''); \r",
                    "\r",
                    "var utftext = \"\",\r",
                    "  start, end, stringl = 0;\r",
                    "\r",
                    "start = end = 0;    \r",
                    "stringl = string.length;\r",
                    "\r",
                    "for (var n = 0; n < stringl; n++) {\r",
                    "  var c1 = string.charCodeAt(n);\r",
                    "  var enc = null;\r",
                    "  if (c1 < 128) {\r",
                    "    end++;\r",
                    "  } else if (c1 > 127 && c1 < 2048) {\r",
                    "    enc = String.fromCharCode((c1 >> 6) | 192) + \r",
                    "      String.fromCharCode((c1 & 63) | 128);\r",
                    "  } else {            \r",
                    "    enc = String.fromCharCode((c1 >> 12) | 224) + \r",
                    "      String.fromCharCode(((c1 >> 6) & 63) | 128) + \r",
                    "      String.fromCharCode((c1 & 63) | 128);\r",
                    "  }\r",
                    "  if (enc !== null) {\r",
                    "    if (end > start) {\r",
                    "      utftext += string.slice(start, end);\r",
                    "    }\r",
                    "    utftext += enc;\r",
                    "    start = end = n + 1;\r",
                    "  }\r",
                    "} \r",
                    "if (end > start) {\r",
                    "  utftext += string.slice(start, stringl);\r",
                    "}\r",
                    "return utftext;\r",
                    ""
                ]
            },
            "designerId": "7b04106b-71e0-4d84-bd66-a764cb8a4ddc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "utf8Decode",
                "fn": "utf8Decode",
                "designer|params": [
                    "argString"
                ],
                "implHandler": [
                    "var tmpArray = [],\r",
                    "i = 0,\r",
                    "ac = 0,\r",
                    "c1 = 0,\r",
                    "c2 = 0,       \r",
                    "c3 = 0;\r",
                    "\r",
                    "argString += '';\r",
                    "\r",
                    "while (i < argString.length) {       \r",
                    "  c1 = argString.charCodeAt(i);\r",
                    "  if (c1 < 128) {\r",
                    "    tmpArray[ac++] = String.fromCharCode(c1);\r",
                    "    i++;\r",
                    "  } else if (c1 > 191 && c1 < 224) {         \r",
                    "    c2 = argString.charCodeAt(i + 1);\r",
                    "    tmpArray[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r",
                    "    i += 2;\r",
                    "  } else {\r",
                    "    c2 = argString.charCodeAt(i + 1);           \r",
                    "    c3 = argString.charCodeAt(i + 2);\r",
                    "    tmpArray[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r",
                    "    i += 3;\r",
                    "  }\r",
                    "} \r",
                    "return tmpArray.join('');\r",
                    ""
                ]
            },
            "designerId": "64039fd8-0e66-4676-aa90-e250db72af27"
        }
    ]
}