{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "dataTypes": "",
        "designer|userClassName": "NHibernate",
        "models": [
            "AvailItemsModel",
            "TableSelectModel",
            "RelationNameModel",
            "PropertyMapModel",
            "MultiSelect"
        ],
        "stores": [
            "AvailItemsStore",
            "ProviderStore",
            "NHibernateTreeStore",
            "MultiStore",
            "RelatedObjectStore",
            "RelationsStore"
        ],
        "views": [
            "nhibernate.ConnectionStringForm",
            "nhibernate.RelationsForm",
            "nhibernate.SelectTablesForm",
            "nhibernate.MultiSelectionGrid",
            "nhibernate.NhibernatePanel",
            "nhibernate.PropertyGrid",
            "nhibernate.DataObjectForm",
            "nhibernate.DataKeyForm",
            "nhibernate.NhibernateTree",
            "nhibernate.SelectPropertiesForm",
            "nhibernate.SelectDataKeysForm",
            "nhibernate.SetPropertyForm"
        ]
    },
    "id": "ExtBox1-ext-gen3053",
    "designerId": "732f42fe-9dc6-418c-8ca8-80f24bb50936",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "dataTypes",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveDbObjectTree",
                "fn": "onSaveDbObjectTree",
                "implHandler": [
                    "var me = this;\r",
                    "var content = this.getMainContent();\r",
                    "content.body.mask('Loading...', 'x-mask-loading');\r",
                    "var nhPanel = button.up('nhibernatepanel');\r",
                    "\r",
                    "var dbObjectsTree = nhPanel.down('nhibernatetree');\r",
                    "var gridSelected = dbObjectsTree.selectedTables;\r",
                    "var dirNode = me.getDirNode(dbObjectsTree.dirNode);\r",
                    "\r",
                    "if(gridSelected.length === 0) {\r",
                    "  gridSelected = dirNode.data.record.dbInfo.dbTableNames.items;\r",
                    "}\r",
                    "var contextName = dirNode.data.record.context;\r",
                    "var endpoint = dirNode.data.record.endpoint;\r",
                    "var baseUrl = dirNode.data.record.BaseUrl;\r",
                    "dirNode.data.record.dbInfo.dbProvider = dirNode.data.record.dbDict.Provider;\r",
                    "var rootNode = dbObjectsTree.getRootNode();\r",
                    "var treeProperty = me.getJsonTree(rootNode, dirNode, gridSelected);\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/Trees',\r",
                    "  timeout: 600000,\r",
                    "  method: 'POST',\r",
                    "  params: {\r",
                    "    scope: contextName,\r",
                    "    app: endpoint,\r",
                    "    baseUrl: baseUrl,\r",
                    "    tree: JSON.stringify(treeProperty)\r",
                    "  },\r",
                    "  success: function (response, request) {\r",
                    "    var rtext = response.responseText;\r",
                    "    var error = 'SUCCESS = FALSE';\r",
                    "    var index = rtext.toUpperCase().indexOf(error);\r",
                    "    if (index == -1) {\r",
                    "      showDialog(400, 100, 'Saving Result', 'Configuration has been saved successfully.', Ext.Msg.OK, null);\r",
                    "      var navpanel = me.getDirTree();\r",
                    "      navpanel.onReload();\r",
                    "      content.body.unmask();\r",
                    "    }\r",
                    "    else {\r",
                    "      var msg = rtext.substring(index + error.length + 2, rtext.length - 1);\r",
                    "      showDialog(400, 100, 'Saving Result - Error', msg, Ext.Msg.OK, null);\r",
                    "      content.body.unmask();\r",
                    "    }\r",
                    "  },\r",
                    "  failure: function (response, request) {\r",
                    "    showDialog(660, 300, 'Saving Result', 'An error has occurred while saving the configuration.', Ext.Msg.OK, null);\r",
                    "    content.body.unmask();\r",
                    "  }\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "nhibernatepanel button[action=savedbobjectstree]"
            },
            "designerId": "ed7e97c7-10ac-4347-99e7-4aba9898cc76"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveDataObject",
                "fn": "onSaveDataObject",
                "implHandler": [
                    "var me = this; \r",
                    "var form = button.up('dataobjectform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var tree = panel.down('nhibernatetree');\r",
                    "var treeNode = tree.getSelectedNode();\r",
                    "var dirNode = me.getDirNode(tree.dirNode);\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var relationFolderNode;\r",
                    "if (treeNode) {\r",
                    "  var treeNodeProps = treeNode.data.property;\r",
                    "  var objectNameField = form.getForm().findField('objectName');\r",
                    "  var objNam = objectNameField.getValue();\r",
                    "\r",
                    "  if (objectNameField.validate())\r",
                    "  treeNodeProps.objectName = objNam;\r",
                    "  else {\r",
                    "    showDialog(400, 100, 'Warning', \"Object Name is not valid. A valid object name should start with alphabet or \\\"_\\\", and follow by any number of \\\"_\\\", alphabet, or number characters\", Ext.Msg.OK, null);\r",
                    "    return;\r",
                    "  }\r",
                    "\r",
                    "  var oldObjNam = treeNodeProps.objectName;\r",
                    "  treeNodeProps.tableName = form.getForm().findField('tableName').getValue();\r",
                    "  treeNodeProps.objectName = objNam;\r",
                    "  treeNodeProps.keyDelimiter = form.getForm().findField('keyDelimiter').getValue();\r",
                    "  treeNodeProps.description = form.getForm().findField('description').getValue();\r",
                    "\r",
                    "  for (var ijk = 0; ijk < dbDict.dataObjects.length; ijk++) {\r",
                    "    var dataObject = dbDict.dataObjects[ijk];\r",
                    "    if (treeNode.data.text.toUpperCase() != dataObject.objectName.toUpperCase())\r",
                    "    continue;\r",
                    "    dataObject.objectName = objNam;\r",
                    "  }\r",
                    "\r",
                    "  treeNode.set('text', objNam);\r",
                    "  var rootNode = tree.getRootNode();\r",
                    "\r",
                    "  for (var i = 0; i < rootNode.childNodes.length; i++) {\r",
                    "    var folderNode = rootNode.childNodes[i];\r",
                    "    var folderNodeProp = folderNode.data.property;\r",
                    "    if (folderNode.childNodes[2])\r",
                    "    relationFolderNode = folderNode.childNodes[2];\r",
                    "    else\r",
                    "    relationFolderNode = folderNode.attributes.children[2];\r",
                    "\r",
                    "    if (!relationFolderNode)\r",
                    "    continue;\r",
                    "\r",
                    "    if (relationFolderNode.childNodes)\r",
                    "    var relChildenNodes = relationFolderNode.childNodes;\r",
                    "    else\r",
                    "    var relChildenNodes = relationFolderNode.children;\r",
                    "\r",
                    "    if (relChildenNodes) {\r",
                    "      for (var k = 0; k < relChildenNodes.length; k++) {\r",
                    "        var relationNode = relChildenNodes[k];\r",
                    "\r",
                    "        if (relationNode.text == '')\r",
                    "        continue;\r",
                    "\r",
                    "        if (relationNode.data)\r",
                    "        var relationNodeAttr = relationNode.data\r",
                    "\r",
                    "        var relObjNam = relationNodeAttr.relatedObjectName;\r",
                    "        if (relObjNam.toLowerCase() != objNam.toLowerCase() && relObjNam.toLowerCase() == oldObjNam.toLowerCase())\r",
                    "        relationNodeAttr.relatedObjectName = objNam;\r",
                    "\r",
                    "        if (relationNodeAttr.relatedObjMap) {\r",
                    "          var relatedObjPropMap = relationNodeAttr.relatedObjMap;\r",
                    "\r",
                    "          for (var iki = 0; iki < relatedObjPropMap.length; iki++) {\r",
                    "            if (relatedObjPropMap[iki].relatedObjName.toLowerCase() == oldObjNam.toLowerCase())\r",
                    "            relatedObjPropMap[iki].relatedObjName = objNam;\r",
                    "          }\r",
                    "        }\r",
                    "      }\r",
                    "    }\r",
                    "  }\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "dataobjectform button[action=dataobjectformapply]"
            },
            "designerId": "311cdc39-f7f2-4d6a-bfd5-eb61656dd5ac"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onResetDataObject",
                "fn": "onResetDataObject",
                "implHandler": [
                    "var me = this;\r",
                    "var form = button.up('dataobjectform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var tree = panel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(tree.dirNode);\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var treeNode = tree.getSelectedNode();\r",
                    "var dObject;\r",
                    "Ext.each(dbDict.dataObjects, function (dataObject) {\r",
                    "  if(dataObject.objectName == treeNode.data.property.objectName)\r",
                    "  dObject = dataObject;\r",
                    "});\r",
                    "\r",
                    "if (treeNode.data.property) {\r",
                    "  form.getForm().findField('objectName').setValue(treeNode.data.record.Name);\r",
                    "  form.getForm().findField('objectNamespace').setValue(dObject.objectNamespace);\r",
                    "  form.getForm().findField('keyDelimiter').setValue(dObject.keyDelimeter);\r",
                    "  form.getForm().findField('description').setValue(dObject.description);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var nameField = form.getForm().findField('objectName');\r",
                    "var objectName = nameField.getValue();\r",
                    "\r",
                    "if (nameField.validate()) {\r",
                    "  treeNode.data.property.objectName = objectName;\r",
                    "  treeNode.set('text', objectName);\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "dataobjectform button[action=dataobjectformreset]"
            },
            "designerId": "ceb8e6c8-db0e-4c3d-93e0-efe2ba0c854c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveKeyProperties",
                "fn": "onSaveKeyProperties",
                "implHandler": [
                    "var me = this;\r",
                    "var content = this.getMainContent();\r",
                    "var panel = button.up('nhibernatepanel');\r",
                    "var dbObjectsTree = panel.down('nhibernatetree');\r",
                    "var treeStore = dbObjectsTree.getStore();\r",
                    "var treeNode = treeStore.getNodeById(panel.treeNode.internalId);\r",
                    "var rootNode = dbObjectsTree.getRootNode();\r",
                    "var dirNode = me.getDirNode(dbObjectsTree.dirNode);\r",
                    "var form = panel.down('selectdatakeysform');\r",
                    "var objectGrid = form.down('multiselectiongrid');\r",
                    "var selected = objectGrid.getSelectionModel().getSelection();\r",
                    "var selectValues = [];\r",
                    "Ext.each(selected, function(item) {\r",
                    "  selectValues.push(item.data.DisplayField);\r",
                    "});\r",
                    "\r",
                    "var keysNode = panel.treeNode;\r",
                    "var propertiesNode = keysNode.parentNode.childNodes[1];\r",
                    "var hiddenRootNode = propertiesNode.raw.hiddenNodes.hiddenNode;\r",
                    "\r",
                    "for (var i = 0; i < keysNode.childNodes.length; i++) {\r",
                    "  var found = false;\r",
                    "\r",
                    "  for (var j = 0; j < selectValues.length; j++) {\r",
                    "    if (selectValues[j].toLowerCase() == keysNode.childNodes[i].data.text.toLowerCase()) {\r",
                    "      found = true;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "\r",
                    "  if (!found) {\r",
                    "    if (keysNode.childNodes[i].data.property)\r",
                    "    var properties = keysNode.childNodes[i].data.property;\r",
                    "\r",
                    "    if (properties) {\r",
                    "      properties.isNullable = true;\r",
                    "      delete properties.keyType;\r",
                    "\r",
                    "      propertiesNode.appendChild({\r",
                    "        text: keysNode.childNodes[i].data.text,\r",
                    "        type: \"dataProperty\",\r",
                    "        leaf: true,\r",
                    "        iconCls: 'treeProperty',\r",
                    "        property: properties\r",
                    "      });\r",
                    "\r",
                    "      keysNode.removeChild(keysNode.childNodes[i], false);\r",
                    "      i--;\r",
                    "    }\r",
                    "  }\r",
                    "}\r",
                    "\r",
                    "var nodeChildren = [];\r",
                    "for (var j = 0; j < keysNode.childNodes.length; j++)\r",
                    "nodeChildren.push(keysNode.childNodes[j].data.text);\r",
                    "\r",
                    "for (var j = 0; j < selectValues.length; j++) {\r",
                    "  var found = false;\r",
                    "  for (var i = 0; i < nodeChildren.length; i++) {\r",
                    "    if (selectValues[j].toLowerCase() == nodeChildren[i].toLowerCase()) {\r",
                    "      found = true;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "  var newKeyNode;\r",
                    "  if (!found) {\r",
                    "\r",
                    "\r",
                    "    for (var jj = 0; jj < propertiesNode.childNodes.length; jj++) {\r",
                    "      if (propertiesNode.childNodes[jj].data.text.toLowerCase() == selectValues[j].toLowerCase()) {\r",
                    "        var properties = propertiesNode.childNodes[jj].data.property;\r",
                    "        properties.keyType = 'assigned';\r",
                    "        properties.nullable = false;\r",
                    "        newKeyNode = {\r",
                    "          text: selectValues[j],\r",
                    "          type: \"keyProperty\",\r",
                    "          leaf: true,\r",
                    "          iconCls: 'treeKey',\r",
                    "          hidden: false,\r",
                    "          property: properties\r",
                    "        };\r",
                    "        keysNode.appendChild(newKeyNode);\r",
                    "\r",
                    "        propertiesNode.removeChild(propertiesNode.childNodes[jj], false);\r",
                    "        break;\r",
                    "      }\r",
                    "    }\r",
                    "\r",
                    "    for (var jj = 0; jj < hiddenRootNode.children.length; jj++) {\r",
                    "      if (hiddenRootNode.children[jj].text.toLowerCase() == selectValues[j].toLowerCase()) {\r",
                    "        var properties = hiddenRootNode.children[jj].property;\r",
                    "        properties.keyType = 'assigned';\r",
                    "        properties.nullable = false;\r",
                    "        newKeyNode = {\r",
                    "          text: selectValues[j],\r",
                    "          type: \"keyProperty\",\r",
                    "          leaf: true,\r",
                    "          iconCls: 'treeKey',\r",
                    "          hidden: false,\r",
                    "          property: properties\r",
                    "        };\r",
                    "        keysNode.appendChild(newKeyNode);\r",
                    "        hiddenRootNode.children.splice(jj, 1);\r",
                    "        jj--;\r",
                    "        break;\r",
                    "      }\r",
                    "    }\r",
                    "    newKeyNode.dirty = true;\r",
                    "  }\r",
                    "}\r",
                    "\r",
                    "if (!keysNode.isExpanded())\r",
                    "keysNode.expand();\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "selectdatakeysform button[action=saveselectkeys]"
            },
            "designerId": "ab9a24e0-e181-467f-b5dd-ec7956d17474"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveDataProperties",
                "fn": "onSaveDataProperties",
                "implHandler": [
                    "var me = this;\r",
                    "var content = this.getMainContent();\r",
                    "var panel = button.up('nhibernatepanel');\r",
                    "var dbObjectsTree = panel.down('nhibernatetree');\r",
                    "var treeStore = dbObjectsTree.getStore();\r",
                    "var treeNode = treeStore.getNodeById(panel.treeNode.internalId);\r",
                    "var rootNode = dbObjectsTree.getRootNode();\r",
                    "var dirNode = me.getDirNode(dbObjectsTree.dirNode);\r",
                    "var form = panel.down('selectpropertiesform');\r",
                    "var objectGrid = form.down('multiselectiongrid');\r",
                    "var selected = objectGrid.getSelectionModel().getSelection();\r",
                    "var selectValues = [];\r",
                    "Ext.each(selected, function(item) {\r",
                    "  selectValues.push(item.data.DisplayField);\r",
                    "});\r",
                    "\r",
                    "var shownProperty = [];\r",
                    "var availItems = [];\r",
                    "var hiddenRootNode = treeNode.raw.hiddenNodes.hiddenNode;\r",
                    "\r",
                    "for (var indexOfProperty = 0; indexOfProperty < node.childNodes.length; indexOfProperty++) {\r",
                    "  !me.hasShown(shownProperty, node.childNodes[indexOfProperty].text)\r",
                    "  shownProperty.push(node.childNodes[indexOfProperty].text);\r",
                    "  indexOfProperty++;\r",
                    "}\r",
                    "\r",
                    "var selectedItems = [];\r",
                    "\r",
                    "Ext.each(node.childNodes, function (node) {\r",
                    "  selectedItems.push(node.data.text);\r",
                    "});\r",
                    "\r",
                    "Ext.each(hiddenRootNode.children, function (node) {\r",
                    "  availItems.push(node.text);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "var hiddenRootNode = treeNode.raw.hiddenNodes.hiddenNode;\r",
                    "var indexHidden;\r",
                    "\r",
                    "for (var i = 0; i < treeNode.childNodes.length; i++) {\r",
                    "  var found = false;\r",
                    "\r",
                    "  for (var j = 0; j < selectValues.length; j++) {\r",
                    "    if (selectValues[j].toLowerCase() == treeNode.childNodes[i].data.text.toLowerCase()) {\r",
                    "      found = true;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "\r",
                    "  if (!found) {\r",
                    "    hiddenRootNode.children.push({\r",
                    "      text: treeNode.childNodes[i].data.text,\r",
                    "      property: treeNode.childNodes[i].data.property,\r",
                    "      hidden: true\r",
                    "    });\r",
                    "    treeNode.removeChild(treeNode.childNodes[i], false);\r",
                    "    i--;\r",
                    "  }\r",
                    "}\r",
                    "\r",
                    "for (var j = 0; j < selectValues.length; j++) {\r",
                    "  found = false;\r",
                    "\r",
                    "  for (var i = 0; i < treeNode.childNodes.length; i++) {\r",
                    "    if (selectValues[j].toLowerCase() == treeNode.childNodes[i].data.text.toLowerCase()) {\r",
                    "      found = true;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "\r",
                    "  for (var k = 0; k < hiddenRootNode.children.length; k++) {\r",
                    "    if (selectValues[j].toLowerCase() == hiddenRootNode.children[k].text.toLowerCase()) {\r",
                    "      indexHidden = k;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "\r",
                    "  if (!found && indexHidden > -1) {\r",
                    "    treeNode.appendChild({\r",
                    "      text: hiddenRootNode.children[indexHidden].text,\r",
                    "      property: hiddenRootNode.children[indexHidden].property,\r",
                    "      type: \"dataProperty\",\r",
                    "      hidden: false,\r",
                    "      leaf: true,\r",
                    "      iconCls: 'treeProperty'\r",
                    "    });\r",
                    "    hiddenRootNode.children.splice(indexHidden, 1);\r",
                    "  }\r",
                    "} \r",
                    "if (!treeNode.isExpanded())\r",
                    "treeNode.expand();\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "selectpropertiesform button[action=saveselectproperties]"
            },
            "designerId": "421667fe-28be-4b13-80bf-a4e6f1995612"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onEditDbConnection",
                "fn": "onEditDbConnection",
                "implHandler": [
                    "var me = this;\r",
                    "var panel = button.up('nhibernatepanel');\r",
                    "me.showConnectionStringForm(panel);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "nhibernatetree button[action=editdbconnection]"
            },
            "designerId": "a3224a9f-f7c9-4f37-ab64-555ca1312e30"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onResetKeyProperties",
                "fn": "onResetKeyProperties",
                "implHandler": [
                    "alert('Not Implemented yet');"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "selectdatakeysform button[action=resetselectkeys]"
            },
            "designerId": "a840d4e0-afcf-4220-bb35-755cf25cb0c5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveKeyProperty",
                "fn": "onSaveKeyProperty",
                "implHandler": [
                    "var me = this;\r",
                    "form = button.up('datakeyform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var tree = panel.down('nhibernatetree');\r",
                    "var node = tree.getSelectedNode();\r",
                    "var propertyNameField = form.getForm().findField('propertyName');\r",
                    "var propertyName = propertyNameField.getValue();\r",
                    "\r",
                    "if (propertyNameField.validate()) {\r",
                    "  node.data.property.propertyName = propertyName;\r",
                    "  node.set('text', propertyName);\r",
                    "}\r",
                    "else {\r",
                    "  showDialog(400, 100, 'Warning', \"Key Property Name is not valid. A valid key property name should start with alphabet or \\\"_\\\", and follow by any number of \\\"_\\\", alphabet, or number characters\", Ext.Msg.OK, null);\r",
                    "}         "
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "button[action=savekeyfield]"
            },
            "designerId": "4bfa6886-5a14-4cc5-85fa-e136dd0591c2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onResetKeyProperty",
                "fn": "onResetKeyProperty",
                "implHandler": [
                    "var me = this;\r",
                    "form = button.up('datakeyform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var tree = panel.down('nhibernatetree');\r",
                    "var node = tree.getSelectedNode();\r",
                    "var propertyNameField = form.getForm().findField('propertyName');\r",
                    "propertyNameField.setValue(node.data.record.Name);\r",
                    "var propertyName = propertyNameField.getValue();\r",
                    "\r",
                    "if (propertyNameField.validate()) {\r",
                    "  node.data.property.propertyName = propertyName;\r",
                    "  node.set('text', propertyName);\r",
                    "}\r",
                    "else {\r",
                    "  showDialog(400, 100, 'Warning', \"Key Property Name is not valid. A valid key property name should start with alphabet or \\\"_\\\", and follow by any number of \\\"_\\\", alphabet, or number characters\", Ext.Msg.OK, null);\r",
                    "} \r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "datakeyform button[action=resetkeyproperty]"
            },
            "designerId": "b4ae9c45-855a-464e-8527-4c8843722675"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveDataProperty",
                "fn": "onSaveDataProperty",
                "implHandler": [
                    "var me = this;\r",
                    "form = button.up('setpropertyform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var tree = panel.down('nhibernatetree');\r",
                    "var node = tree.getSelectedNode();\r",
                    "var propertyNameField = form.getForm().findField('propertyName');\r",
                    "var propertyName = propertyNameField.getValue();\r",
                    "\r",
                    "if (propertyNameField.validate()) {\r",
                    "  node.data.property.propertyName = propertyName;\r",
                    "  node.set('text', propertyName);\r",
                    "}\r",
                    "else {\r",
                    "  showDialog(400, 100, 'Warning', \"Property Name is not valid. A valid property name should start with alphabet or \\\"_\\\", and follow by any number of \\\"_\\\", alphabet, or number characters\", Ext.Msg.OK, null);\r",
                    "}         "
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "setpropertyform button[action=savedataproperty]"
            },
            "designerId": "cb53080a-76ca-40dc-831e-6c276816d674"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onResetDataProperty",
                "fn": "onResetDataProperty",
                "implHandler": [
                    "var me = this;\r",
                    "form = button.up('setpropertyform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var tree = panel.down('nhibernatetree');\r",
                    "var node = tree.getSelectedNode();\r",
                    "var propertyNameField = form.getForm().findField('propertyName');\r",
                    "propertyNameField.setValue(node.data.property.columnName);\r",
                    "var propertyName = propertyNameField.getValue();\r",
                    "\r",
                    "if (propertyNameField.validate()) {\r",
                    "  node.data.property.propertyName = propertyName;\r",
                    "  node.set('text', propertyName);\r",
                    "}\r",
                    "else {\r",
                    "  showDialog(400, 100, 'Warning', \"Property Name is not valid. A valid property name should start with alphabet or \\\"_\\\", and follow by any number of \\\"_\\\", alphabet, or number characters\", Ext.Msg.OK, null);\r",
                    "} \r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "setpropertyform button[action=resetdataproperty]"
            },
            "designerId": "8523203d-be36-4ed0-9633-afaa76a23787"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectTablesForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "selectTablesForm",
                "selector": "selecttablesform",
                "xtype": "selecttablesform"
            },
            "designerId": "8bbeb51d-23e6-4aff-a6ff-f6cfc1adf177"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "connectionStringForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "connectionStringForm",
                "selector": "connectionstringform",
                "xtype": "connectionstringform"
            },
            "designerId": "195135e4-e893-40c4-9e55-579b7f801453"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "dataObjectForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "dataObjectForm",
                "selector": "dataobjectform",
                "xtype": "dataobjectform"
            },
            "designerId": "e0c2034a-3877-4b2e-8b5a-696bb697e8eb"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "dataKeyForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "dataKeyForm",
                "selector": "datakeyform",
                "xtype": "datakeyform"
            },
            "designerId": "ab6a81dc-02ae-4595-984a-44303b3599f6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectKeyFieldsForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "selectKeyFieldsForm",
                "selector": "selectdatakeysform",
                "xtype": "selectdatakeysform"
            },
            "designerId": "26a0913a-399b-421f-9a1c-5651f323d72e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "selectPropertiesForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "selectPropertiesForm",
                "selector": "selectpropertiesform",
                "xtype": "selectpropertiesform"
            },
            "designerId": "e7905506-2df6-463a-bf73-35b8995ef35d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "dataPropertyForm",
                "autoCreate": true,
                "forceCreate": true,
                "ref": "dataPropertyForm",
                "selector": "setpropertyform",
                "xtype": "setpropertyform"
            },
            "designerId": "9010516a-8609-4f68-a31d-77c73694edaa"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "dirTree",
                "ref": "dirTree",
                "selector": "viewport > directorypanel > directorytree",
                "xtype": "directorytree"
            },
            "designerId": "a567ac8d-0260-4852-9b38-a7d2efc77d0f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "mainContent",
                "ref": "mainContent",
                "selector": "viewport > centerpanel > contentpanel",
                "xtype": "contentpanel"
            },
            "designerId": "834c3422-cae6-4615-82af-7d8c35c57bad"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onConfignhibernate",
                "fn": "onConfignhibernate",
                "implHandler": [
                    "var me = this;\r",
                    "var dirTree = me.getDirTree(),\r",
                    "dirNode = dirTree.getSelectedNode(),\r",
                    "content = me.getMainContent();\r",
                    "\r",
                    "var dbDict, dbInfo, tree;\r",
                    "\r",
                    "var context = dirNode.data.record.context;\r",
                    "var datalayer = dirNode.data.record.DataLayer;\r",
                    "var endpoint = dirNode.data.record.endpoint;\r",
                    "var baseUrl = dirNode.data.record.BaseUrl;\r",
                    "var title = 'Nhibernate Configuration - ' + context + '.' + endpoint;\r",
                    "\r",
                    "var panel = content.down('nhibernatepanel[title='+title+']');\r",
                    "\r",
                    "if(!panel) {\r",
                    "  panel = Ext.widget('nhibernatepanel', {\r",
                    "    'title': title\r",
                    "  });  \r",
                    "  content.add(panel);\r",
                    "\r",
                    "  tree = panel.down('nhibernatetree');\r",
                    "  \r",
                    "  tree.dirNode = dirNode.internalId;\r",
                    "  var treeStore = tree.getStore();\r",
                    "  var treeProxy = treeStore.getProxy();\r",
                    "\r",
                    "  dbDict = me.getDbDictionary(context, endpoint, baseUrl, function(dbDict) { \r",
                    "    if(dbDict.ConnectionString !== null) {\r",
                    "      var base64 = AM.view.nhibernate.Utility;\r",
                    "      dbDict.ConnectionString = base64.decode(dbDict.ConnectionString);\r",
                    "      if(dbDict) {\r",
                    "        var cstr = dbDict.ConnectionString;\r",
                    "        if(cstr) {\r",
                    "          dirNode.data.record.dbDict = dbDict;\r",
                    "          dbInfo = me.getConnStringParts(cstr, dirNode);\r",
                    "          var selectTableNames = me.setTableNames(dbDict);\r",
                    "\r",
                    "          treeStore.on('beforeload', function (store, action) {\r",
                    "            var params = treeProxy.extraParams;\r",
                    "            params.dbProvider = dbDict.Provider;\r",
                    "            params.dbServer = dbInfo.dbServer;\r",
                    "            params.dbInstance = dbInfo.dbInstance;\r",
                    "            params.dbName = dbInfo.dbName;\r",
                    "            params.dbSchema = dbDict.SchemaName;\r",
                    "            params.dbPassword = dbInfo.dbPassword;\r",
                    "            params.dbUserName = dbInfo.dbUserName;\r",
                    "            params.portNumber = dbInfo.portNumber;\r",
                    "            params.tableNames = selectTableNames;\r",
                    "            params.serName = dbInfo.serName;\r",
                    "            params.contextName = context;\r",
                    "            params.endpoint = endpoint;\r",
                    "            params.baseUrl = baseUrl;\r",
                    "          }, me);\r",
                    "\r",
                    "          treeStore.load();\r",
                    "          me.getTableNames(context, endpoint, baseUrl, dirNode);\r",
                    "        }\r",
                    "      }\r",
                    "    } else {\r",
                    "      if (dbInfo !== null && dbInfo !== undefined)\r",
                    "        dirNode.data.record.dbInfo = dbInfo;\r",
                    "\r",
                    "      if (dbDict !== null && dbDict !== undefined)\r",
                    "        dirNode.data.record.dbDict = dbDict;\r",
                    "      me.showConnectionStringForm(panel);\r",
                    "      tree.disable();\r",
                    "\r",
                    "    }\r",
                    "  });\r",
                    "\r",
                    "}\r",
                    "me.getDataTypes();\r",
                    "content.setActiveTab(panel);"
                ],
                "name": "confignhibernate",
                "scope": "this"
            },
            "designerId": "82baa5f2-a803-456f-8a4b-e6e5a431f42f"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "init",
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "me.application.addEvents('confignhibernate');"
                ]
            },
            "designerId": "abaf4912-6a1c-4fd1-9541-74c897fa76df"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onTreepanelItemClick",
                "fn": "onTreepanelItemClick",
                "implHandler": [
                    "var me = this;\r",
                    "var panel = tablepanel.up('nhibernatepanel');\r",
                    "var dataNode = record.store.getAt(index);\r",
                    "panel.treeNode = dataNode;\r",
                    "var nodeType = dataNode.data.type.toUpperCase();\r",
                    "if (dataNode.isRoot()) {\r",
                    "  me.showSelectTablesForm(panel);\r",
                    "}\r",
                    "\r",
                    "if (nodeType) {\r",
                    "  switch (nodeType) {\r",
                    "    case 'DATAOBJECT':\r",
                    "    me.showDataObjectForm(panel);\r",
                    "    break;\r",
                    "    case 'KEYS':\r",
                    "    me.showSelectKeyFieldsForm(panel);\r",
                    "    break;\r",
                    "    case 'KEYPROPERTY':\r",
                    "    me.showDataKeyForm(panel);\r",
                    "    break;\r",
                    "    case 'PROPERTIES':\r",
                    "    me.showSelectPropertiesForm(panel);\r",
                    "    break;\r",
                    "    case 'DATAPROPERTY':\r",
                    "    me.showDataPropertyForm(panel);\r",
                    "    break;\r",
                    "    case 'RELATIONSHIPS':\r",
                    "    //setRelations(editor, tree, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "    case 'RELATIONSHIP':\r",
                    "    //setRelationFields(editor, rootNode, dataNode, contextName, endpoint);\r",
                    "    break;\r",
                    "  }\r",
                    "}\r",
                    "\r",
                    ""
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "nhibernate.NhibernateTree",
                "designer|controlQuery": "nhibernatetree"
            },
            "designerId": "e55b2200-d766-4630-82b3-5b08d50e9064"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "hasShown",
                "fn": "hasShown",
                "designer|params": [
                    "shownArray",
                    "text"
                ],
                "implHandler": [
                    "for (var shownIndex = 0; shownIndex < shownArray.length; shownIndex++)\r",
                    "    if (shownArray[shownIndex] == text)\r",
                    "        return true;\r",
                    "return false;"
                ]
            },
            "designerId": "dda5638f-4793-4a30-86da-91060eb6b4bf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getDbDictionary",
                "fn": "getDbDictionary",
                "designer|params": [
                    "context",
                    "endpoint",
                    "baseUrl",
                    "successCallback"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dbDict, dbInfo;\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/DBDictionary',\r",
                    "  method: 'POST',\r",
                    "  timeout: 6000000,\r",
                    "  params: {\r",
                    "    scope: context,\r",
                    "    app: endpoint,\r",
                    "    baseUrl: baseUrl\r",
                    "  },\r",
                    "  success: function (response, request) {\r",
                    "    dbDict = Ext.JSON.decode(response.responseText);\r",
                    "    successCallback(dbDict);\r",
                    "  },\r",
                    "  failure: function (response, request) {\r",
                    "    //var dataObjPanel = content.items.map[contextName + '.' + endpoint + '.-nh-config'];;\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "8280a8ae-21d9-4e16-b388-4a178353e729"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getTableNames",
                "fn": "getTableNames",
                "designer|params": [
                    "context",
                    "endpoint",
                    "baseUrl",
                    "dirNode"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dbInfo = dirNode.data.record.dbInfo;\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/TableNames',\r",
                    "  method: 'POST',\r",
                    "  timeout: 6000000,\r",
                    "  params: {\r",
                    "    scope: context,\r",
                    "    app: endpoint,\r",
                    "    dbProvider: dbDict.Provider,\r",
                    "    dbServer: dbInfo.dbServer,\r",
                    "    dbInstance: dbInfo.dbInstance,\r",
                    "    dbName: dbInfo.dbName,\r",
                    "    dbSchema: dbDict.SchemaName,\r",
                    "    dbUserName: dbInfo.dbUserName,\r",
                    "    dbPassword: dbInfo.dbPassword,\r",
                    "    portNumber: dbInfo.portNumber,\r",
                    "    serName: dbInfo.serName,\r",
                    "    baseUrl: baseUrl\r",
                    "  },\r",
                    "  success: function (response, request) {\r",
                    "    dirNode.data.record.dbInfo.dbTableNames = Ext.JSON.decode(response.responseText);\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    if (a.response)\r",
                    "    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "95192dbc-81f5-4ac7-8b20-ad9be22d9a52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "setTableNames",
                "fn": "setTableNames",
                "designer|params": [
                    "dbDict"
                ],
                "implHandler": [
                    "var selectTableNames = [];\r",
                    "\r",
                    "for (var i = 0; i < dbDict.dataObjects.length; i++) {\r",
                    "  var tableName = (dbDict.dataObjects[i].tableName ? dbDict.dataObjects[i].tableName : dbDict.dataObjects[i]);\r",
                    "  selectTableNames.push(tableName);\r",
                    "}\r",
                    "return selectTableNames;"
                ]
            },
            "designerId": "0573e2fd-252f-4155-b2b4-bd710c3b86c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getAvailableItems",
                "fn": "getAvailableItems",
                "designer|params": [
                    "node"
                ],
                "implHandler": [
                    "var availItems = [];\r",
                    "var propertiesNode = node.parentNode.childNodes[1];\r",
                    "\r",
                    "for (var i = 0; i < propertiesNode.childNodes.length; i++) {\r",
                    "  var itemName = propertiesNode.childNodes[i].text;\r",
                    "  var found = false;\r",
                    "\r",
                    "  for (var j = 0; j < node.childNodes.length; j++) {\r",
                    "    if (node.childNodes[j].text.toLowerCase() == itemName.toLowerCase()) {\r",
                    "      found = true;\r",
                    "      break;\r",
                    "    }\r",
                    "  }\r",
                    "  if (!found) {\r",
                    "    availItems.push([itemName, itemName]);\r",
                    "  }\r",
                    "}\r",
                    "return availItems;"
                ]
            },
            "designerId": "a80490c1-9a7c-4e05-b8ef-4fe23a7a276a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getSelectedItems",
                "fn": "getSelectedItems",
                "designer|params": [
                    "node"
                ],
                "implHandler": [
                    "var selectedItems = [];\r",
                    "var propertiesNode = node.parentNode.childNodes[1];\r",
                    "\r",
                    "for (var i = 0; i < node.childNodes.length; i++) {\r",
                    "  var keyName = node.childNodes[i].text;\r",
                    "  selectedItems.push([keyName, keyName]);\r",
                    "}\r",
                    "return selectedItems;\r",
                    ""
                ]
            },
            "designerId": "82e893d1-0600-42df-b6ce-6bcf86d2d7d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getSelectItems",
                "fn": "getSelectItems",
                "designer|params": [
                    "node"
                ],
                "implHandler": [
                    "var selectItems = [];\r",
                    "\r",
                    "for (var i = 0; i < node.childNodes.length; i++) {\r",
                    "  var keyName = node.childNodes[i].data.text;\r",
                    "  selectItems.push(keyName);\r",
                    "}\r",
                    "\r",
                    "return selectItems;"
                ]
            },
            "designerId": "24ab7cef-3c85-44fc-be18-2b7c626141b4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showSelectTablesForm",
                "fn": "showSelectTablesForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getSelectTablesForm();\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "var selected = [];\r",
                    "var dict = dirNode.data.record.dbDict.dataObjects;\r",
                    "Ext.each(dict, function(table) {\r",
                    "  selected.push(table.tableName);\r",
                    "});\r",
                    "var tables = dirNode.data.record.dbInfo.dbTableNames.items; \r",
                    "var grid = form.down('#tablesSelectionGrid');\r",
                    "grid.loadItems(tables);\r",
                    "\r",
                    "grid.down('gridcolumn').setText('Select Data Tables');\r",
                    "grid.selectItems(selected);\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "panel.doLayout();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "9d09026c-708e-447c-801d-f60ea204561e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showConnectionStringForm",
                "fn": "showConnectionStringForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this,\r",
                    "\r",
                    "form = me.getConnectionStringForm();\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var combo = form.down('#providerCombo');\r",
                    "combo.on('select', function (combo, record, options) {\r",
                    "  var dbProvider = record[0].data.Provider.toUpperCase();\r",
                    "  var dbName = form.getForm().findField('dbName');\r",
                    "  var portNumber = form.getForm().findField('portNumber');\r",
                    "  var host = form.getForm().findField('host');\r",
                    "  var dbServer = form.getForm().findField('dbServer');\r",
                    "  var dbInstance = form.getForm().findField('dbInstance');\r",
                    "  var serviceName = form.down('#oraclecontainer');\r",
                    "  var dbSchema = form.getForm().findField('dbSchema');\r",
                    "  var userName = form.getForm().findField('dbUserName');\r",
                    "  var password = form.getForm().findField('dbPassword');\r",
                    "  var sid = form.getForm().findField('field_sid');\r",
                    "  var serName = form.getForm().findField('field_serviceName');\r",
                    "\r",
                    "  if (dbProvider.indexOf('ORACLE') > -1) {\r",
                    "    if (dbName.hidden === false) {\r",
                    "      dbName.hide();\r",
                    "      dbServer.hide();\r",
                    "      dbInstance.hide();\r",
                    "    }\r",
                    "\r",
                    "    if (host.hidden === true) {\r",
                    "      if (dbDict.Provider) {\r",
                    "        if (dbDict.Provider.toUpperCase().indexOf('ORACLE') > -1) {\r",
                    "          host.setValue(dbInfo.dbServer);\r",
                    "          sid.setValue(dbInfo.dbInstance);\r",
                    "          serName.setValue(dbInfo.serName);\r",
                    "          serviceName.show();\r",
                    "          host.show();\r",
                    "          userName.setValue(dbInfo.dbUserName);\r",
                    "          password.setValue(dbInfo.dbPassword);\r",
                    "          dbSchema.setValue(dbDict.SchemaName);\r",
                    "        }\r",
                    "        else\r",
                    "        me.resetConfigOracle(host, dbSchema, userName, password, serviceName, sid, serName);\r",
                    "      }\r",
                    "      else\r",
                    "      me.resetConfigOracle(host, dbSchema, userName, password, serviceName, sid, serName);\r",
                    "\r",
                    "      portNumber.setValue('1521');\r",
                    "      portNumber.show();\r",
                    "    }\r",
                    "  }\r",
                    "  else if (dbProvider.indexOf('MSSQL') > -1) {\r",
                    "    if (host.hidden === false) {\r",
                    "      portNumber.hide();\r",
                    "      host.hide();\r",
                    "      sid.clearInvalid();\r",
                    "      sid.disable();\r",
                    "      serName.clearInvalid();\r",
                    "      serName.disable();\r",
                    "      serviceName.hide();\r",
                    "    }\r",
                    "\r",
                    "    if (dbName.hidden === true) {\r",
                    "      if (dbDict.Provider) {\r",
                    "        if (dbDict.Provider.toUpperCase().indexOf('MSSQL') > -1) {\r",
                    "          dbName.setValue(dbInfo.dbName);\r",
                    "          dbServer.setValue(dbInfo.dbServer);\r",
                    "          dbInstance.setValue(dbInfo.dbInstance);\r",
                    "          dbName.show();\r",
                    "          dbServer.show();\r",
                    "          dbInstance.show();\r",
                    "          sid.clearInvalid();\r",
                    "          sid.disable();\r",
                    "          serName.clearInvalid();\r",
                    "          serName.disable();\r",
                    "          dbSchema.setValue(dbDict.SchemaName);\r",
                    "          userName.setValue(dbInfo.dbUserName);\r",
                    "          password.setValue(dbInfo.dbPassword);\r",
                    "        }\r",
                    "        else\r",
                    "        me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);\r",
                    "      }\r",
                    "      else\r",
                    "      me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);\r",
                    "    }\r",
                    "\r",
                    "    portNumber.setValue('1433');\r",
                    "  }\r",
                    "  else if (dbProvider.indexOf('MYSQL') > -1) {\r",
                    "    if (dbServer.hidden === true) {\r",
                    "      dbServer.setValue('');\r",
                    "      dbServer.clearInvalid();\r",
                    "      dbServer.show();\r",
                    "    }\r",
                    "\r",
                    "    if (host.hidden === false) {\r",
                    "      portNumber.hide();\r",
                    "      host.hide();\r",
                    "      sid.clearInvalid();\r",
                    "      sid.disable();\r",
                    "      serName.clearInvalid();\r",
                    "      serName.disable();\r",
                    "      serviceName.hide();\r",
                    "      portNumber.setValue('3306');\r",
                    "    }\r",
                    "\r",
                    "  }\r",
                    "\r",
                    "}, me);\r",
                    "\r",
                    "var cmbStore = combo.getStore();\r",
                    "var cmbProxy = cmbStore.getProxy();\r",
                    "cmbStore.on('beforeload', function(store, action) {\r",
                    "  cmbProxy.extraParams.baseUrl = node.data.record.BaseUrl;\r",
                    "});\r",
                    "cmbStore.load();\r",
                    "\r",
                    "form.setActive(dirNode.data.record.dbInfo);\r",
                    "\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "panel.removeAll();\r",
                    "panel.doLayout();\r",
                    "panel.add(form);"
                ]
            },
            "designerId": "b2ce807b-c0fd-424f-a32b-a3a71dd4ef62"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showDataObjectForm",
                "fn": "showDataObjectForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getDataObjectForm();\r",
                    "var keyDelimiter;\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "var treeNode = dataTree.getSelectedNode();\r",
                    "\r",
                    "if (treeNode.data.property.keyDelimiter === 'null' || \r",
                    "!treeNode.data.property.keyDelimiter || treeNode.data.property.keyDelimiter === undefined) {\r",
                    "  keyDelimiter = '_';\r",
                    "}   else {\r",
                    "  keyDelimiter = treeNode.data.property.keyDelimiter;\r",
                    "}\r",
                    "\r",
                    "form.getForm().findField('tableName').setValue(treeNode.data.property.tableName);\r",
                    "form.getForm().findField('objectNamespace').setValue(treeNode.data.property.objectNamespace);\r",
                    "form.getForm().findField('objectName').setValue(treeNode.data.property.objectName);\r",
                    "form.getForm().findField('keyDelimiter').setValue(keyDelimiter);\r",
                    "\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();"
                ]
            },
            "designerId": "36145a37-131d-4a5b-a762-ee0abc8f8ead"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getConnStringParts",
                "fn": "getConnStringParts",
                "designer|params": [
                    "connString",
                    "dirNode"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dsValue, serName;\r",
                    "var connStrParts = connString.split(';');\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var provider = dbDict.Provider.toUpperCase();\r",
                    "\r",
                    "if (dirNode.data.record.dbInfo === undefined) {\r",
                    "  dirNode.data.record.dbInfo = {};\r",
                    "}\r",
                    "\r",
                    "if (!dirNode.data.record.dbInfo.dbUserName)\r",
                    "dirNode.data.record.dbInfo.dbName = dbDict.SchemaName;\r",
                    "\r",
                    "for (var i = 0; i < connStrParts.length; i++) {\r",
                    "  var pair = connStrParts[i].split('=');\r",
                    "  switch (pair[0].toUpperCase()) {\r",
                    "    case 'DATA SOURCE':\r",
                    "    if (provider.indexOf('MSSQL') > -1) {\r",
                    "      dsValue = pair[1].split('\\\\');\r",
                    "      dirNode.data.record.dbInfo.dbServer = (dsValue[0].toLowerCase() == '.' ? 'localhost' : dsValue[0]);\r",
                    "      dirNode.data.record.dbInfo.dbInstance = dsValue[1];\r",
                    "      dirNode.data.record.dbInfo.portNumber = 1433;\r",
                    "      dirNode.data.record.dbInfo.serName = '';\r",
                    "    }\r",
                    "    else if (provider.indexOf('MYSQL') > -1) {\r",
                    "      dirNode.data.record.dbInfo.dbServer = (pair[1].toLowerCase() == '.' ? 'localhost' : pair[1]);\r",
                    "      dirNode.data.record.dbInfo.portNumber = 3306;\r",
                    "    }\r",
                    "    else if (provider.indexOf('ORACLE') > -1) {\r",
                    "      var dsStr = connStrParts[i].substring(12, connStrParts[i].length);\r",
                    "      dsValue = dsStr.split('=');\r",
                    "      for (var j = 0; j < dsValue.length; j++) {\r",
                    "        dsValue[j] = dsValue[j].substring(dsValue[j].indexOf('(') + 1, dsValue[j].length);\r",
                    "        switch (dsValue[j].toUpperCase()) {\r",
                    "          case 'HOST':\r",
                    "          var server = dsValue[j + 1];\r",
                    "          var port = dsValue[j + 2];\r",
                    "          var index = server.indexOf(')');\r",
                    "          server = server.substring(0, index);\r",
                    "          dirNode.data.record.dbInfo.portNumber = port.substring(0, 4);\r",
                    "          dirNode.data.record.dbInfo.dbServer = (server.toLowerCase() == '.' ? 'localhost' : server);\r",
                    "          break;\r",
                    "          case 'SERVICE_NAME':\r",
                    "          serName = dsValue[j + 1];\r",
                    "          index = sername.indexOf(')');\r",
                    "          dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);\r",
                    "          dirNode.data.record.dbInfo.serName = 'SERVICE_NAME';\r",
                    "          break;\r",
                    "          case 'SID':\r",
                    "          serName = dsValue[j + 1];\r",
                    "          index = sername.indexOf(')');\r",
                    "          dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);\r",
                    "          dirNode.data.record.dbInfo.serName = 'SID';\r",
                    "          break;\r",
                    "        }\r",
                    "      }\r",
                    "    }\r",
                    "    break;\r",
                    "    case 'INITIAL CATALOG':\r",
                    "    dirNode.data.record.dbInfo.dbName = pair[1];\r",
                    "    break;\r",
                    "    case 'USER ID':\r",
                    "    dirNode.data.record.dbInfo.dbUserName = pair[1];\r",
                    "    break;\r",
                    "    case 'PASSWORD':\r",
                    "    dirNode.data.record.dbInfo.dbPassword = pair[1];\r",
                    "    break;\r",
                    "  }\r",
                    "}\r",
                    "return dirNode.data.record.dbInfo;"
                ]
            },
            "designerId": "e6408b80-6349-457d-8324-fe89ff39f707"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showSelectKeyFieldsForm",
                "fn": "showSelectKeyFieldsForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getSelectKeyFieldsForm();\r",
                    "var selected = [];\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "var dataNode = dataTree.getSelectedNode();\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "\r",
                    "var context = dirNode.data.record.context;\r",
                    "var endpoint = dirNode.data.record.endpoint;\r",
                    "var baseUrl = dirNode.data.record.baseUrl;\r",
                    "\r",
                    "var grid = form.down('#multiSelectDataKeys');\r",
                    "\r",
                    "grid.down('gridcolumn').setText('Select Key Properties');\r",
                    "\r",
                    "var availItems = [];\r",
                    "var propertiesNode = dataNode.parentNode.childNodes[1];\r",
                    "var hiddenRootNode = propertiesNode.raw.hiddenNodes.hiddenNode;\r",
                    "\r",
                    "var selectItems = me.getSelectItems(dataNode);\r",
                    "Ext.each(selectItems, function (item) {\r",
                    "  availItems.push(item);\r",
                    "});\r",
                    "\r",
                    "Ext.each(hiddenRootNode.children, function(node) {\r",
                    "  availItems.push(node.text);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "grid.loadItems(availItems);\r",
                    "grid.selectItems(selectItems);\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();\r",
                    "\r",
                    "Ext.getBody().unmask();\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "310028c2-5cbf-4882-82de-d0be3b467c45"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showSelectPropertiesForm",
                "fn": "showSelectPropertiesForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getSelectPropertiesForm();\r",
                    "var selected = [];\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "var dataNode = dataTree.getSelectedNode();\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "\r",
                    "var context = dirNode.data.record.context;\r",
                    "var endpoint = dirNode.data.record.endpoint;\r",
                    "var baseUrl = dirNode.data.record.baseUrl;\r",
                    "\r",
                    "var grid = form.down('#propertiesSelectionGrid');\r",
                    "grid.down('gridcolumn').setText('Select Data Properties');\r",
                    "\r",
                    "var availItems = [];\r",
                    "var propertiesNode = dataNode.parentNode.childNodes[1];\r",
                    "var hiddenRootNode = propertiesNode.raw.hiddenNodes.hiddenNode;\r",
                    "\r",
                    "var selectItems = me.getSelectItems(dataNode);\r",
                    "Ext.each(selectItems, function (item) {\r",
                    "  availItems.push(item);\r",
                    "});\r",
                    "\r",
                    "Ext.each(hiddenRootNode.children, function(node) {\r",
                    "  availItems.push(node.text);\r",
                    "});\r",
                    "\r",
                    "grid.loadItems(availItems);\r",
                    "grid.selectItems(selectItems);\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();\r",
                    "\r",
                    "Ext.getBody().unmask();"
                ]
            },
            "designerId": "75f3cc35-c72f-42bd-9652-89c691aae788"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showDataKeyForm",
                "fn": "showDataKeyForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getDataKeyForm();\r",
                    "\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "var treeNode = nhibernatePanel.treeNode;\r",
                    "\r",
                    "form.setActiveRecord(treeNode.data.property);\r",
                    "\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();\r",
                    "\r",
                    "Ext.getBody().unmask();"
                ]
            },
            "designerId": "74077bb2-8e49-45e8-a8ad-a44d705325d4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getDirNode",
                "fn": "getDirNode",
                "designer|params": [
                    "nodeInternalId"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var dirTree = me.getDirTree();\r",
                    "var treeStore = dirTree.getStore();\r",
                    "return treeStore.getNodeById(nodeInternalId);"
                ]
            },
            "designerId": "4cc338da-158a-47fd-bcb0-bf4fdcfb6593"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "showDataPropertyForm",
                "fn": "showDataPropertyForm",
                "designer|params": [
                    "nhibernatePanel"
                ],
                "implHandler": [
                    "var me = this, \r",
                    "form = me.getDataPropertyForm();\r",
                    "\r",
                    "var dataTree = nhibernatePanel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "var treeNode = nhibernatePanel.treeNode;\r",
                    "\r",
                    "form.setActiveRecord(treeNode.data.property);\r",
                    "\r",
                    "panel = nhibernatePanel.down('#nhibernateContent');\r",
                    "\r",
                    "panel.removeAll();\r",
                    "\r",
                    "panel.add(form);\r",
                    "panel.doLayout();\r",
                    "\r",
                    "Ext.getBody().unmask();"
                ]
            },
            "designerId": "e9b65513-4689-4265-8561-042d743fe9f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getJsonTree",
                "fn": "getJsonTree",
                "designer|params": [
                    "rootNode",
                    "dirNode",
                    "selectedTables"
                ],
                "implHandler": [
                    "var me = this; \r",
                    "var treeProperty = {};\r",
                    "treeProperty.dataObjects = [];\r",
                    "treeProperty.IdentityConfiguration = null;\r",
                    "var dbInfo = dirNode.data.record.dbInfo;\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var tProp = me.setTreeProperty(dbInfo, dbDict, selectedTables);\r",
                    "treeProperty.connectionString = tProp.connectionString;\r",
                    "if (treeProperty.connectionString !== null && treeProperty.connectionString.length > 0) {\r",
                    "  var base64 = AM.view.nhibernate.Utility;\r",
                    "  treeProperty.connectionString = base64.encode(tProp.connectionString);\r",
                    "}\r",
                    "treeProperty.schemaName = tProp.schemaName;\r",
                    "treeProperty.provider = tProp.provider;\r",
                    "treeProperty.enableSummary = tProp.enableSummary;\r",
                    "\r",
                    "var keyName;\r",
                    "for (var i = 0; i < rootNode.childNodes.length; i++) {\r",
                    "  var folder = me.getFolderFromChildNode(rootNode.childNodes[i]);\r",
                    "  treeProperty.dataObjects.push(folder);\r",
                    "}\r",
                    "\r",
                    "dbDict.ConnectionString = treeProperty.connectionString;\r",
                    "dbDict.SchemaName = treeProperty.schemaName;\r",
                    "dbDict.Provider = treeProperty.provider;\r",
                    "dbDict.dataObjects = treeProperty.dataObjects;\r",
                    "dbDict.enableSummary = treeProperty.enableSummary;\r",
                    "return treeProperty;"
                ]
            },
            "designerId": "97b4c271-7d5f-4adc-89e0-79d79045f280"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "setTreeProperty",
                "fn": "setTreeProperty",
                "designer|params": [
                    "dbInfo",
                    "dbDict",
                    "selected"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var treeProperty = {};\r",
                    "if (selected) {\r",
                    "  treeProperty.enableSummary = dbDict.enableSummary;\r",
                    "  treeProperty.provider = dbDict.Provider;\r",
                    "}  else if (dbDict.enableSummary)\r",
                    "treeProperty.enableSummary = dbDict.enableSummary;\r",
                    "else\r",
                    "treeProperty.enableSummary = false;\r",
                    "\r",
                    "if (dbInfo) {\r",
                    "  var dbServer = dbInfo.dbServer;\r",
                    "  dbServer = (dbServer.toLowerCase() == 'localhost' ? '.' : dbServer);\r",
                    "  var upProvider = treeProperty.provider.toUpperCase();\r",
                    "  var serviceName = '';\r",
                    "  var serName = '';\r",
                    "  if (dbInfo.serName) {\r",
                    "    serviceName = serviceNamePane.items.items[0].value;\r",
                    "    serName = serviceNamePane.items.items[0].serName;\r",
                    "  }\r",
                    "  else if (dbInfo) {\r",
                    "    if (dbInfo.dbInstance)\r",
                    "    serviceName = dbInfo.dbInstance;\r",
                    "    if (dbInfo.serName)\r",
                    "    serName = dbInfo.serName;\r",
                    "  }\r",
                    "\r",
                    "  if (upProvider.indexOf('MSSQL') > -1) {\r",
                    "    var dbInstance = dbInfo.dbInstance;\r",
                    "    var dbDatabase = dbInfo.dbName;\r",
                    "    if (dbInstance.toUpperCase() == \"DEFAULT\") {\r",
                    "      var dataSrc = 'Data Source=' + dbServer + ';Initial Catalog=' + dbDatabase;\r",
                    "    } else {\r",
                    "      var dataSrc = 'Data Source=' + dbServer + '\\\\' + dbInstance + ';Initial Catalog=' + dbDatabase;\r",
                    "    }\r",
                    "  }\r",
                    "  else if (upProvider.indexOf('ORACLE') > -1)\r",
                    "  var dataSrc = 'Data Source=' + \r",
                    "  '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' + \r",
                    "  dbServer + ')(PORT=' + dbInfo.portNumber + \r",
                    "  ')))(CONNECT_DATA=(SERVER=DEDICATED)(' + serName + '=' + serviceName + ')))';\r",
                    "  else if (upProvider.indexOf('MYSQL') > -1)\r",
                    "    var dataSrc = 'Data Source=' + dbServer;\r",
                    "  treeProperty.connectionString = dataSrc + ';User ID=' + dbInfo.dbUserName + ';Password=' + dbInfo.dbPassword;\r",
                    "  treeProperty.schemaName = dbDict.SchemaName;\r",
                    "}\r",
                    "else {\r",
                    "  treeProperty.provider = dbDict.Provider;\r",
                    "  var dbServer = dbInfo.dbServer;\r",
                    "  var upProvider = treeProperty.provider.toUpperCase();\r",
                    "  dbServer = (dbServer.toLowerCase() == 'localhost' ? '.' : dbServer);\r",
                    "\r",
                    "  if (upProvider.indexOf('MSSQL') > -1) {\r",
                    "    if (dbInfo.dbInstance) {\r",
                    "      if (dbInfo.dbInstance.toUpperCase() == \"DEFAULT\") {\r",
                    "        var dataSrc = 'Data Source=' + dbServer + ';Initial Catalog=' + dbInfo.dbName;\r",
                    "      } else {\r",
                    "        var dataSrc = 'Data Source=' + dbServer + '\\\\' + dbInfo.dbInstance + ';Initial Catalog=' + dbInfo.dbName;\r",
                    "      }\r",
                    "    }\r",
                    "  }\r",
                    "  else if (upProvider.indexOf('ORACLE') > -1)\r",
                    "  var dataSrc = 'Data Source=' + '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' + \r",
                    "  dbServer + ')(PORT=' + dbInfo.portNumber + ')))(CONNECT_DATA=(SERVER=DEDICATED)(' + \r",
                    "  dbInfo.serName + '=' + dbInfo.dbInstance + ')))';\r",
                    "  else if (upProvider.indexOf('MYSQL') > -1)\r",
                    "  var dataSrc = 'Data Source=' + dbServer;\r",
                    "\r",
                    "  treeProperty.connectionString = dataSrc + ';User ID=' + dbInfo.dbUserName + ';Password=' + dbInfo.dbPassword;\r",
                    "  treeProperty.schemaName = dbDict.SchemaName;\r",
                    "}\r",
                    "return treeProperty;"
                ]
            },
            "designerId": "953eecce-9efb-4e77-8bb2-8fc5876af708"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getFolderFromChildNode",
                "fn": "getFolderFromChildNode",
                "designer|params": [
                    "folderNode"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var folderNodeProp = folderNode.data.property;\r",
                    "var folder = {};\r",
                    "var keyName = '';\r",
                    "\r",
                    "folder.tableName = folderNodeProp.tableName;\r",
                    "folder.objectNamespace = folderNodeProp.objectNamespace;\r",
                    "folder.objectName = folderNodeProp.objectName;\r",
                    "folder.description = folderNodeProp.description;\r",
                    "\r",
                    "if (folderNodeProp.keyDelimiter && folderNodeProp.keyDelimiter != 'null')\r",
                    "folder.keyDelimeter = folderNodeProp.keyDelimiter;    \r",
                    "else\r",
                    "folder.keyDelimeter = '_';\r",
                    "\r",
                    "folder.keyProperties = [];\r",
                    "folder.dataProperties = [];\r",
                    "folder.dataRelationships = [];\r",
                    "\r",
                    "for (var j = 0; j < folderNode.childNodes.length; j++) {\r",
                    "  if (folderNode.childNodes[1])\r",
                    "  var propertyFolderNode = folderNode.childNodes[1];    \r",
                    "\r",
                    "  if (folderNode.childNodes[0])\r",
                    "  var keyFolderNode = folderNode.childNodes[0];   \r",
                    "\r",
                    "  if (folderNode.childNodes[2])\r",
                    "  var relationFolderNode = folderNode.childNodes[2];   \r",
                    "\r",
                    "  if (folderNode.childNodes[j])\r",
                    "  subFolderNodeText = folderNode.childNodes[j].data.text;\r",
                    "\r",
                    "  switch (subFolderNodeText) {\r",
                    "    case 'Keys':\r",
                    "    if (keyFolderNode)\r",
                    "    var keyChildenNodes = keyFolderNode.childNodes;       \r",
                    "\r",
                    "    for (var k = 0; k < keyChildenNodes.length; k++) {\r",
                    "      var keyNode = keyChildenNodes[k];          \r",
                    "      var keyProps = {};\r",
                    "\r",
                    "      if (keyNode.data.property)\r",
                    "      var keyNodeProf = keyNode.data.property;         \r",
                    "\r",
                    "      keyProps.keyPropertyName = keyNode.data.text;\r",
                    "      keyName = keyNode.data.text;\r",
                    "      folder.keyProperties.push(keyProps);\r",
                    "      var tagProps = {};\r",
                    "      tagProps.columnName = keyNodeProf.columnName;\r",
                    "      tagProps.propertyName = keyNode.data.text;\r",
                    "\r",
                    "      if (typeof keyNodeProf.dataType == 'string')\r",
                    "      tagProps.dataType = me.getDataTypeIndex(keyNodeProf.dataType);\r",
                    "      else\r",
                    "      tagProps.dataType = keyNodeProf.dataType;\r",
                    "\r",
                    "      tagProps.dataLength = keyNodeProf.dataLength;\r",
                    "\r",
                    "      if (keyNodeProf.nullable)\r",
                    "      tagProps.isNullable = keyNodeProf.nullable.toString().toLowerCase();\r",
                    "      else\r",
                    "      tagProps.isNullable = 'false';\r",
                    "\r",
                    "      tagProps.isHidden = 'false';\r",
                    "\r",
                    "      if (!keyNodeProf.keyType)\r",
                    "      tagProps.keyType = 1;\r",
                    "      else\r",
                    "      if (typeof keyNodeProf.keyType != 'string')\r",
                    "      tagProps.keyType = keyNodeProf.keyType;\r",
                    "      else {\r",
                    "        switch (keyNodeProf.keyType.toLowerCase()) {\r",
                    "          case 'assigned':\r",
                    "          tagProps.keyType = 1;\r",
                    "          break;\r",
                    "          case 'unassigned':\r",
                    "          tagProps.keyType = 0;\r",
                    "          break;\r",
                    "          default:\r",
                    "          tagProps.keyType = 1;\r",
                    "          break;\r",
                    "        }\r",
                    "      }\r",
                    "\r",
                    "      if (keyNodeProf.showOnIndex)\r",
                    "      tagProps.showOnIndex = keyNodeProf.showOnIndex.toString().toLowerCase();\r",
                    "      else\r",
                    "      tagProps.showOnIndex = 'false';\r",
                    "\r",
                    "      tagProps.numberOfDecimals = keyNodeProf.numberOfDecimals;\r",
                    "      folder.dataProperties.push(tagProps);    \r",
                    "    }\r",
                    "    break;\r",
                    "    case 'Properties':\r",
                    "    if (folderNode.childNodes[1]) {\r",
                    "      var propChildenNodes = propertyFolderNode.childNodes;\r",
                    "      if(propChildenNodes.length > 0)\r",
                    "      folder = me.prepareProperties(folder, propChildenNodes, 'false', keyName);\r",
                    "    }\r",
                    "    break;\r",
                    "    case 'Relationships':\r",
                    "    if (!relationFolderNode)\r",
                    "    break;\r",
                    "\r",
                    "    if (relationFolderNode.childNodes)\r",
                    "    var relChildenNodes = relationFolderNode.childNodes;       \r",
                    "\r",
                    "    if (relChildenNodes)\r",
                    "    for (var k = 0; k < relChildenNodes.length; k++) {\r",
                    "      var relationNode = relChildenNodes[k];\r",
                    "      var found = false;\r",
                    "      for (var ik = 0; ik < folder.dataRelationships.length; ik++)\r",
                    "      if (relationNode.text.toLowerCase() == folder.dataRelationships[ik].relationshipName.toLowerCase()) {\r",
                    "        found = true;\r",
                    "        break;\r",
                    "      }\r",
                    "\r",
                    "      if (found || relationNode.data.text === '')\r",
                    "      continue;\r",
                    "\r",
                    "      relationNodeAttr = relationNode.data;\r",
                    "      var relation = {};\r",
                    "      relation.propertyMaps = [];\r",
                    "\r",
                    "      for (var m = 0; m < relationNodeAttr.propertyMap.length; m++) {\r",
                    "        var propertyPairNode = relationNodeAttr.propertyMap[m];\r",
                    "        var propertyPair = {};\r",
                    "\r",
                    "        propertyPair.dataPropertyName = propertyPairNode.dataPropertyName;\r",
                    "        propertyPair.relatedPropertyName = propertyPairNode.relatedPropertyName;\r",
                    "        relation.propertyMaps.push(propertyPair);\r",
                    "      }\r",
                    "\r",
                    "      relation.relatedObjectName = relationNodeAttr.relatedObjectName;\r",
                    "      relation.relationshipName = relationNodeAttr.text;\r",
                    "      relation.relationshipType = relationNodeAttr.relationshipTypeIndex;\r",
                    "      folder.dataRelationships.push(relation);\r",
                    "    }\r",
                    "    break;\r",
                    "  }\r",
                    "}\r",
                    "return folder;"
                ]
            },
            "designerId": "9d5001a3-d9e5-44f6-85cb-12abb962057e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "prepareProperties",
                "fn": "prepareProperties",
                "designer|params": [
                    "folder",
                    "propChildNodes",
                    "ifHidden",
                    "keyName"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "var hasData = false;\r",
                    "if(propChildNodes.length === 0) return folder;\r",
                    "for (var k = 0; k < propChildNodes.length; k++) {\r",
                    "  var propertyNode = propChildNodes[k];\r",
                    "\r",
                    "  if (propertyNode.data !== undefined) {\r",
                    "    if (propertyNode.data.property !== undefined) {\r",
                    "      var propertyNodeProf = propertyNode.data.property;\r",
                    "      hasData = true;\r",
                    "    }\r",
                    "  }\r",
                    "\r",
                    "  if (!hasData)\r",
                    "  var propertyNodeProf = propertyNode.property;\r",
                    "\r",
                    "  var props = {};\r",
                    "  props.columnName = propertyNodeProf.columnName;\r",
                    "  props.propertyName = propertyNodeProf.propertyName;\r",
                    "\r",
                    "  if (typeof propertyNodeProf.dataType.toLowerCase() == 'string')\r",
                    "  props.dataType = me.getDataTypeIndex(propertyNodeProf.dataType);\r",
                    "  else\r",
                    "  props.dataType = propertyNodeProf.dataType;\r",
                    "\r",
                    "  props.dataLength = propertyNodeProf.dataLength;\r",
                    "\r",
                    "  if (propertyNodeProf.nullable)\r",
                    "  props.isNullable = propertyNodeProf.nullable.toString().toLowerCase();\r",
                    "  else\r",
                    "  props.isNullable = 'false';\r",
                    "\r",
                    "  if (keyName !== '') {\r",
                    "    if (props.columnName == keyName)\r",
                    "    props.keyType = 1;\r",
                    "    else\r",
                    "    props.keyType = 0;\r",
                    "  }\r",
                    "  else\r",
                    "  props.keyType = 0;\r",
                    "\r",
                    "  if (propertyNodeProf.showOnIndex)\r",
                    "  props.showOnIndex = propertyNodeProf.showOnIndex.toString().toLowerCase();\r",
                    "  else\r",
                    "  props.showOnIndex = 'false';\r",
                    "\r",
                    "  props.isHidden = ifHidden;\r",
                    "  props.numberOfDecimals = propertyNodeProf.numberOfDecimals;\r",
                    "  folder.dataProperties.push(props);\r",
                    "}\r",
                    "return folder;"
                ]
            },
            "designerId": "03c466ab-70e2-466f-b918-ba7fd3cc45d7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getDataTypeIndex",
                "fn": "getDataTypeIndex",
                "designer|params": [
                    "dataType"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "if (me.dataTypes === undefined)\r",
                    "return;\r",
                    "\r",
                    "var i = 0;\r",
                    "\r",
                    "while (me.dataTypes[i] === undefined)\r",
                    "i++;\r",
                    "\r",
                    "for (var k = i; k < me.dataTypes.length; k++) {\r",
                    "  if (me.dataTypes[k][1] == dataType)\r",
                    "  return me.dataTypes[k][0];\r",
                    "}"
                ]
            },
            "designerId": "528af08b-1648-498a-8b40-17edeca33caf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "getDataTypes",
                "fn": "getDataTypes",
                "implHandler": [
                    "var me = this;\r",
                    "Ext.Ajax.request({\r",
                    "  url: 'NHibernate/DataType',\r",
                    "  method: 'GET',\r",
                    "  timeout: 6000000,\r",
                    "  success: function (response, request) {\r",
                    "    var dataTypeName = Ext.JSON.decode(response.responseText);\r",
                    "    me.dataTypes = [];\r",
                    "    var i = 0;\r",
                    "    while (!dataTypeName[i])\r",
                    "    i++;\r",
                    "    while (dataTypeName[i]) {\r",
                    "      me.dataTypes.push([i, dataTypeName[i]]);\r",
                    "      i++;\r",
                    "    }\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    if (a.response)\r",
                    "    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);\r",
                    "  }\r",
                    "});"
                ]
            },
            "designerId": "36f62e6e-efae-4a55-80be-7b79ff4ae1a1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onConnectToDatabase",
                "fn": "onConnectToDatabase",
                "implHandler": [
                    "var me = this;\r",
                    "var form = button.up('connectionstringform');\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var dataTree = panel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "var context = dirNode.data.record.context;\r",
                    "var endpoint = dirNode.data.record.endpoint;\r",
                    "var baseUrl = dirNode.data.record.BaseUrl;\r",
                    "var content = me.getMainContent();\r",
                    "var dbProvider = form.getForm().findField('dbProvider').getValue().toUpperCase();\r",
                    "var dbName = form.getForm().findField('dbName');\r",
                    "var portNumber = form.getForm().findField('portNumber');\r",
                    "var host = form.getForm().findField('host');\r",
                    "var dbServer = form.getForm().findField('dbServer');\r",
                    "var dbInstance = form.getForm().findField('dbInstance');\r",
                    "var serviceNamePane = form.items.items[10];\r",
                    "var dbSchema = form.getForm().findField('dbSchema');\r",
                    "var servieName = '';\r",
                    "var serName = '';\r",
                    "\r",
                    "dirNode.data.record.dbDict.Provider = dbProvider;\r",
                    "dirNode.data.record.dbDict.SchemaName = dbSchema.getValue();\r",
                    "\r",
                    "if (dbProvider.indexOf('ORACLE') > -1) {\r",
                    "  dbServer.setValue(host.getValue());\r",
                    "  dbName.setValue(dbSchema.getValue());\r",
                    "  servieName = serviceNamePane.items.items[0].value;\r",
                    "  serName = serviceNamePane.items.items[0].serName;\r",
                    "  dbInstance.setValue(servieName);\r",
                    "}\r",
                    "else if (dbProvider.indexOf('MSSQL') > -1) {\r",
                    "  host.setValue(dbServer.getValue());\r",
                    "  serviceName = dbInstance.getValue();\r",
                    "}\r",
                    "else if (dbProvider.indexOf('MYSQL') > -1) {\r",
                    "  dbName.setValue(dbSchema.getValue());\r",
                    "  dbInstance.setValue(dbSchema.getValue());\r",
                    "}\r",
                    "\r",
                    "form.getForm().submit({\r",
                    "  url: 'nhibernate/TableNames',\r",
                    "  method: 'POST',\r",
                    "  timeout: 600000,\r",
                    "  params: {\r",
                    "    scope: context,\r",
                    "    app: endpoint,\r",
                    "    serName: serName,\r",
                    "    baseUrl: baseUrl\r",
                    "  },\r",
                    "  success: function (f, a) {\r",
                    "    dirNode.data.record.dbInfo = form.getForm().getValues();\r",
                    "    var dbInfo = dirNode.data.record.dbInfo;\r",
                    "\r",
                    "    dbInfo.dbTableNames = Ext.JSON.decode(a.response.responseText);\r",
                    "    panel.dirNode = dirNode;\r",
                    "\r",
                    "    me.showSelectTablesForm(panel);\r",
                    "    return;\r",
                    "\r",
                    "  },\r",
                    "  failure: function (f, a) {\r",
                    "    if (a.response)\r",
                    "    showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);\r",
                    "    else {\r",
                    "      showDialog(400, 100, 'Warning', 'Please fill in every field in this form.', Ext.Msg.OK, null);\r",
                    "    }\r",
                    "  }//,\r",
                    "  // waitMsg: 'Loading ...'\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "button[action=connecttodatabase]"
            },
            "designerId": "de3da772-eb44-4a0f-b69b-eca09bb6bf6d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSaveDataObjects",
                "fn": "onSaveDataObjects",
                "implHandler": [
                    "var me = this;\r",
                    "var content = this.getMainContent();\r",
                    "var panel = button.up('nhibernatepanel');\r",
                    "var dbObjectsTree = panel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(dbObjectsTree.dirNode);\r",
                    "var rootNode = dbObjectsTree.getRootNode();\r",
                    "var form = panel.down('selecttablesform');\r",
                    "var objectGrid = form.down('multiselectiongrid');\r",
                    "var selected = objectGrid.getSelectionModel().getSelection();\r",
                    "\r",
                    "var serName = '';\r",
                    "var dbInfo = dirNode.data.record.dbInfo;\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "dbInfo.dbSchema = dbDict.SchemaName;\r",
                    "dbDict.enableSummary = form.getForm().findField('enableSummary').value;\r",
                    "if (dbObjectsTree.disabled) {\r",
                    "  dbObjectsTree.enable();\r",
                    "}\r",
                    "\r",
                    "if (dbInfo.serName)\r",
                    "serName = dbInfo.serName;\r",
                    "\r",
                    "if (selected.length < 1) {\r",
                    "  while (rootNode.firstChild) {\r",
                    "    rootNode.removeChild(rootNode.firstChild);\r",
                    "  }\r",
                    "  showDialog(200, 100, 'Warning', 'No tables selected....', Ext.Msg.OK, null);\r",
                    "  return;\r",
                    "} else {\r",
                    "\r",
                    "  userTableNames = [];\r",
                    "  Ext.each(selected, function (table) {\r",
                    "    userTableNames.push(table.data.DisplayField);\r",
                    "  });\r",
                    "}\r",
                    "dbObjectsTree.selectedTables = userTableNames;\r",
                    "\r",
                    "var treeStore = dbObjectsTree.getStore();\r",
                    "treeStore.on('beforeload', function (store, operation) {\r",
                    "  var params = store.proxy.extraParams;\r",
                    "  params.dbProvider = dbDict.Provider;\r",
                    "  params.dbServer = dbInfo.dbServer;\r",
                    "  params.dbInstance = dbInfo.dbInstance;\r",
                    "  params.dbName = dbInfo.dbName;\r",
                    "  params.dbSchema = dbInfo.dbSchema;\r",
                    "  params.dbPassword = dbInfo.dbPassword;\r",
                    "  params.dbUserName = dbInfo.dbUserName;\r",
                    "  params.portNumber = dbInfo.portNumber;\r",
                    "  params.tableNames = userTableNames;\r",
                    "  params.serName = serName;\r",
                    "  params.contextName = dirNode.data.record.context;\r",
                    "  params.endpoint = dirNode.data.record.endpoint;\r",
                    "  params.baseUrl = dirNode.data.record.BaseUrl;\r",
                    "}, me);\r",
                    "\r",
                    "panel.body.mask('Loading...', 'x-mask-loading');\r",
                    "treeStore.load();\r",
                    "panel.body.unmask();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "button[action=applyobjects]"
            },
            "designerId": "3e1f10e8-8741-424a-b907-8228eb4ccee2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetConfigOracle",
                "fn": "resetConfigOracle",
                "designer|params": [
                    "host",
                    "dbSchema",
                    "userName",
                    "password",
                    "serviceName",
                    "sid",
                    "serName"
                ],
                "implHandler": [
                    "host.setValue('');\r",
                    "host.clearInvalid();\r",
                    "\r",
                    "host.show();\r",
                    "\r",
                    "dbSchema.setValue('');\r",
                    "dbSchema.clearInvalid();\r",
                    "\r",
                    "userName.setValue('');\r",
                    "userName.clearInvalid();\r",
                    "\r",
                    "password.setValue('');\r",
                    "password.clearInvalid();\r",
                    "serviceName.show();\r",
                    "\r",
                    "sid.setValue('');\r",
                    "sid.clearInvalid();\r",
                    "\r",
                    "sid.setValue('');\r",
                    "sid.clearInvalid(); "
                ]
            },
            "designerId": "b97ade21-d9f9-4fd2-94f7-41a04f894485"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "resetConfigMsSql",
                "fn": "resetConfigMsSql",
                "designer|params": [
                    "dbName",
                    "dbServer",
                    "dbInstance",
                    "dbSchema",
                    "userName",
                    "password"
                ],
                "implHandler": [
                    "dbName.setValue('');\r",
                    "dbName.clearInvalid();\r",
                    "dbName.show();\r",
                    "\r",
                    "dbServer.setValue('localhost');\r",
                    "dbServer.show();\r",
                    "\r",
                    "dbInstance.setValue('default');\r",
                    "dbInstance.show();\r",
                    "\r",
                    "dbSchema.setValue('dbo');\r",
                    "\r",
                    "userName.setValue('');\r",
                    "userName.clearInvalid();\r",
                    "\r",
                    "password.setValue('');\r",
                    "password.clearInvalid();"
                ]
            },
            "designerId": "7a887148-8f8c-4221-9130-9effead85cdc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onResetDataObjects",
                "fn": "onResetDataObjects",
                "implHandler": [
                    "var me = this;\r",
                    "var form = button.up('selecttablesform');\r",
                    "var grid = form.down('multiselectiongrid');\r",
                    "\r",
                    "var panel = form.up('nhibernatepanel');\r",
                    "var dataTree = panel.down('nhibernatetree');\r",
                    "var dirNode = me.getDirNode(dataTree.dirNode);\r",
                    "var dbInfo = dirNode.data.record.dbInfo;\r",
                    "var dbDict = dirNode.data.record.dbDict;\r",
                    "var rootNode = dataTree.getRootNode();\r",
                    "var selectTableNamesSingle = [];\r",
                    "var availTableName = [];\r",
                    "var found = false;\r",
                    "var repeatItem;\r",
                    "for (var i = 0; i < dbInfo.dbTableNames.items.length; i++) {\r",
                    "  repeatItem = dbInfo.dbTableNames.items[i];\r",
                    "  availTableName.push([repeatItem, repeatItem]);\r",
                    "}\r",
                    "\r",
                    "for (var j = 0; j < availTableName.length; j++)\r",
                    "for (var i = 0; i < rootNode.childNodes.length; i++) {\r",
                    "  if (rootNode.childNodes[i].data.property.tableName.toLowerCase() == availTableName[j][0].toLowerCase()) {\r",
                    "    found = true;\r",
                    "    availTableName.splice(j, 1);\r",
                    "    j--;\r",
                    "    break;\r",
                    "  }\r",
                    "}\r",
                    "\r",
                    "for (var i = 0; i < rootNode.childNodes.length; i++) {\r",
                    "  var nodeText = rootNode.childNodes[i].data.property.tableName;\r",
                    "  selectTableNamesSingle.push(nodeText);\r",
                    "}\r",
                    "\r",
                    "grid.selectItems(selectTableNamesSingle);"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "selecttablesform button[action=resetobjects]"
            },
            "designerId": "a71a2f2f-bc04-43cd-bf27-8743c34357bf"
        }
    ]
}