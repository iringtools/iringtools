/*
 * File: Scripts/AM/view/directory/ApplicationForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.directory.ApplicationForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.applicationform',

  requires: [
    'AM.view.directory.DataLayerCombo',
    'AM.view.directory.AvailBaseUrlCombo'
  ],

  record: '',
  border: true,
  frame: false,
  bodyStyle: 'padding:10px 5px 0',
  method: 'POST',
  url: 'directory/endpoint',

  initComponent: function() {
    var me = this;

    me.initialConfig = Ext.apply({
      method: 'POST',
      url: 'directory/endpoint'
    }, me.initialConfig);

    Ext.applyIf(me, {
      defaults: {
        msgTarget: 'side',
        anchor: '100%'
      },
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'bottom',
          items: [
            {
              xtype: 'tbfill'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onSave();
              },
              text: 'Ok'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onReset();
              },
              text: 'Cancel'
            }
          ]
        }
      ],
      items: [
        {
          xtype: 'hiddenfield',
          name: 'oldAssembly'
        },
        {
          xtype: 'hiddenfield',
          name: 'baseUrl'
        },
        {
          xtype: 'hiddenfield',
          name: 'assembly'
        },
        {
          xtype: 'hiddenfield',
          name: 'oldBaseUrl'
        },
        {
          xtype: 'hiddenfield',
          name: 'contextValue'
        },
        {
          xtype: 'hiddenfield',
          name: 'state'
        },
        {
          xtype: 'hiddenfield',
          name: 'path'
        },
        {
          xtype: 'textfield',
          name: 'endpoint',
          fieldLabel: 'Endpoint Name'
        },
        {
          xtype: 'textareafield',
          name: 'description',
          fieldLabel: 'Description'
        },
        {
          xtype: 'textfield',
          disabled: true,
          name: 'context',
          fieldLabel: 'Context Name'
        },
        {
          xtype: 'datalayercombo'
        },
        {
          xtype: 'form',
          border: false,
          frame: false,
          itemId: 'baseurlform',
          layout: {
            type: 'column'
          },
          items: [
            {
              xtype: 'availbaseurlcombo',
              columnWidth: 0.87
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                var me = this;
                var urlCombo = me.up('form').down('combo');
                var baseUrl = urlCombo.value;
                Ext.Ajax.request({
                  url: 'directory/testBaseUrl',
                  timeout: 600000,
                  method: 'POST',
                  params: {
                    baseUrl: baseUrl
                  },
                  success: function (response, request) {
                    if (response.responseText.indexOf('error') == -1)
                    showDialog(400, 100, 'Testing Result', 'The url is valid and the server is connected.', Ext.Msg.OK, null);
                    else
                    showDialog(400, 100, 'Testing Result', 'Connection failed. Please enter/select a valid url.', Ext.Msg.OK, null);
                  },
                  failure: function (response, request) {
                    showDialog(400, 100, 'Testing Result', 'Connection failed. Please enter/select a valid url.', Ext.Msg.OK, null);
                  }
                });
              },
              columnWidth: 0.13,
              style: 'float: right;',
              text: 'Test Url',
              tooltip: 'Test the entered Url'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onSave: function() {
    var me = this;
    var win = me.up('window');
    var endpointName = me.getForm().findField('endpoint').getValue();
    var urlCombo = me.down('form').down('combo');
    var dlCombo = me.down('combo');
    var baseUrl;
    var state = me.getForm().findField('state').getValue();
    if (urlCombo.value !== '' && dlCombo.value !== null) {
      me.getForm().findField('baseUrl').setValue(urlCombo.value);
      baseUrl = urlCombo.value;
    }

    if(baseUrl) {
      Ext.Ajax.request({
        url: 'directory/testBaseUrl',
        timeout: 600000,
        method: 'POST',
        params: {
          baseUrl: baseUrl
        },
        success: function (response, request) {
          if (response.responseText.indexOf('error') > -1) {
            showDialog(400, 100, 'Testing Result', 'Connection failed. Please enter/select a valid base url.', Ext.Msg.OK, null);
            return;
          }
          else {
            if (ifExistSibling(endpointName, win.node, state)) {
              showDialog(400, 100, 'Warning', 'The name \"' + endpointName + '\" already exits in this level, please choose a different name.', Ext.Msg.OK, null);
              return;
            }

            me.getForm().submit({
              waitMsg: 'Saving Data...',
              success: function (response, request) {

                win.fireEvent('save', me);
              },
              failure: function (response, request) {
                var rtext = request.result;
                if (rtext.toUpperCase().indexOf('FALSE') > 0) {
                var ind = rtext.indexOf('}');
                var len = rtext.length - ind - 1;
                var msg = rtext.substring(ind + 1, rtext.length - 1);
                showDialog(400, 100, 'Error saving endpoint changes', msg, Ext.Msg.OK, null);
                return;
              }
              var message = 'Error saving changes!';
              showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
            }
          });
        }
      },
      failure: function (response, request) {
        showDialog(400, 100, 'Testing Result', 'Connection failed. Please enter/select a valid base url.', Ext.Msg.OK, null);
        return;
      }
    });
  } else {
    showDialog(400, 100, 'Testing Result', 'Enter values for required fields.', Ext.Msg.OK, null);
    return;
  }
  },

  onReset: function() {
    var me = this;
    var win = me.up('window');
    win.fireEvent('Cancel', me);
  }

});