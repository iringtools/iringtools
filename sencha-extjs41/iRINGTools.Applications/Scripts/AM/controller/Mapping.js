/*
 * File: Scripts/AM/controller/Mapping.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.controller.Mapping', {
  extend: 'Ext.app.Controller',

  parentClass: '',
  models: [
    'MappingModel'
  ],
  stores: [
    'MappingStore'
  ],
  views: [
    'common.PropertyPanel',
    'common.ContentPanel',
    'common.CenterPanel',
    'mapping.MappingTree',
    'directory.GraphMapForm',
    'mapping.ClassMapForm',
    'mapping.ClassMapWindow',
    'mapping.PropertyMapWindow',
    'directory.GraphMapWindow',
    'mapping.ValueListMapWindow',
    'mapping.ValueListMapForm',
    'mapping.ValueListWindow',
    'mapping.MappingPanel',
    'mapping.ValueListForm'
  ],

  refs: [
    {
      ref: 'dirTree',
      selector: 'viewport > directorypanel > directorytree'
    },
    {
      ref: 'mainContent',
      selector: 'viewport > centerpanel > contentpanel'
    }
  ],

  onDeleteTemplateMap: function(item, e, options) {
    var me = this;
    var content = me.getMainContent();
    var dirTree = me.getDirTree();
    var panel = content.down('mappingpanel');
    var tree = content.down('mappingtree'),
    node = tree.getSelectedNode();

    me.getParentClass(node);
    Ext.Ajax.request({
      url: 'mapping/deleteTemplateMap',
      method: 'POST',
      params: {
        contextName: panel.contextName,
        endpoint: panel.endpoint,
        baseUrl: panel.baseUrl,
        mappingNode: node.data.id,
        parentIdentifier: me.parentClass,
        identifier: node.data.identifier,
        index: node.parentNode.indexOf(node)
      },
      success: function () {
        tree.onReload();

      },
      failure: function () { 

      }
    });
  },

  onEditOrNewGraph: function(item, e, options) {
    var me = this;
    var nodeId, contextName, endpoint, baseUrl, graphName, 
    objectName, classLabel, classUrl, identifier, wintitle;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode(),
    record = node.data.record;

    if (record && record.record) {
      identifier = getLastXString(record.record.classTemplateMaps[0].classMap.identifiers[0], 1).split('.')[1];
      graphName = record.record.name;
      objectName = contextName + '/' + endpoint + '/' + 'DataObjects/DataObject/' + 
      record.record.classTemplateMaps[0].classMap.identifiers[0].replace('.', '/');
      classLabel = record.record.classTemplateMaps[0].classMap.name;
      classUrl = record.record.classTemplateMaps[0].classMap.id;
    }

    if(item.itemId == 'editgraph') {
      wintitle = 'Edit Graph \"' + graphName + '\"'; 
    } else {
      wintitle = 'Add new GraphMap to Mapping';
    }
    var conf = {
      id: 'tab-' + node.data.id,
      title: wintitle ,
      iconCls: 'tabsGraph',
      height: 200,
      width: 430
    };

    var win = Ext.widget('graphmapwindow', conf);

    if(node) {
      nodeId = node.data.id;
      contextName = node.data.property.context;
      endpoint = node.data.property.endpoint;
      baseUrl = node.data.property.baseUrl; 
    }
    var formRecord = {
      'contextName': contextName,
      'endpoint': endpoint,
      'oldGraphName': graphName,
      'baseUrl': baseUrl,
      'mappingNode': nodeId,
      'graphName': graphName,
      'objectName': objectName,
      'classUrl': classUrl,
      'classLabel': classLabel,
      'oldClassUrl': classUrl,
      'oldClassLabel': classLabel,
      'keyProperty': identifier
    };

    var form = win.down('form').getForm();
    form.setValues(formRecord);


    win.down('form').updateDDContainers(record);

    win.on('save', function () {
      win.close(); 
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.close();
    }, me);


    win.show();
  },

  openGraphMap: function(item, e, options) {
    var me = this;
    var tree = me.getDirTree();
    var node = tree.getSelectedNode();
    var content = me.getMainContent(),
    context = node.data.property.context,
    endpoint = node.data.property.endpoint,
    baseUrl = node.data.property.baseUrl,
    graphName = node.data.text,
    title = 'GraphMap - ' + context + "." + endpoint + '.' + node.data.text;


    var mapPanel = content.down('mappingpanel[title='+title+']');
    if(!mapPanel) {
      mapPanel = Ext.widget('mappingpanel', {
        'title': title, 
        'contextName': context,
        'baseUrl': baseUrl, 
        'graphName': graphName,
        'endpoint': endpoint
      });
      var mapProp = mapPanel.down('propertypanel');

      var mapTree = mapPanel.down('mappingtree');
      var treeStore = mapTree.getStore();
      var params = treeStore.getProxy().extraParams;

      treeStore.on('beforeload', function (store, operation, eopts) {
        params.contextName = context;
        params.endpoint = endpoint;
        params.baseUrl = baseUrl;
        params.graphName = graphName;
      }, me);

      mapTree.on('beforeitemexpand', function () {
        content.getEl().mask('Loading...');
      }, me);

      mapTree.on('load', function () {
        content.getEl().unmask();
      }, me);
      mapTree.on('itemexpand', function () {
        content.getEl().unmask();
      }, me);

      mapTree.on('itemclick', function (tablepanel, record, item, index, e) {
        var obj = record.store.getAt(index).data;
        if (obj.property && obj.property !== "" && obj.property.length) {
          mapProp.setSource(obj.property);
        } else {
          if (obj.record.type  && !obj.record.roleMaps) {
            var arrStr = '';
            for (var i in obj.record) {
              if (i != 'type' && obj.record[i] !== null && obj.record[i] !== '') {
                arrStr += i + '=' + obj.record[i] + '&';
              }
            }
            var type = me.getObjectType(obj.record.type);
            arrStr += 'typeDescription=' + type;
            var arr = Ext.Object.fromQueryString(arrStr);
            mapProp.setSource(arr);
          }
          else {
            mapProp.setSource(obj.record);
          }
        }

      });
      treeStore.load();
      content.add(mapPanel);
    }

    content.setActiveTab(mapPanel);
  },

  addClassMap: function(item, e, options) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    var tree = mapPanel.down('mappingtree'),
    node = tree.getSelectedNode();

    me.getParentClass(node);

    var index = node.parentNode.parentNode.indexOf(node.parentNode);
    var win = Ext.widget('classmapwindow', {
      mappingNode: node,
      formid: 'propertytarget-' + mapPanel.contextName + '-' + mapPanel.endpoint
    });

    win.on('Save', function () {
      win.close();
      tree.onReload();
      if (node.get('expanded') === false)
      node.expand();
    }, me);

    win.on('reset', function() {
      win.close();
    }, me);

    var formRecord = {
      'contextName': mapPanel.contextName,
      'endpoint': mapPanel.endpoint,
      'baseUrl': mapPanel.baseUrl,
      'graphName': mapPanel.graphName,
      'index': index
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);

    win.show();

  },

  mapProperty: function(item, e, options) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    var tree = mapPanel.down('mappingtree'),
    node = tree.getSelectedNode(),

    win = Ext.widget('propertymapwindow', {
      'classId': node.parentNode.parentNode.data.identifier,
      'mappingNode': node
    });
    var roleName = getLastXString(node.data.id, 1);
    var index = node.parentNode.parentNode.indexOf(node.parentNode);
    win.on('Save', function () {
      win.close();
      tree.store.load();
      if (node.get('expanded') === false)
      node.expand();
    }, me);

    var formRecord = {
      'contextName': mapPanel.contextName,
      'endpoint': mapPanel.endpoint,
      'baseUrl': mapPanel.baseUrl,
      'graphName': mapPanel.graphName,
      'index': index,
      'roleName': roleName
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);

    win.on('Cancel', function () {
      win.close();
    }, me);
    win.show();
  },

  onMakeReference: function(item, e, options) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    var tree = mapPanel.down('mappingtree'),
    node = tree.getSelectedNode(),
    parentNode = node.parentNode;

    Ext.Ajax.request({
      url: 'mapping/makereference',
      method: 'POST',
      params: {
        contextName: mapPanel.contextName,
        endpoint: mapPanel.endpoint,
        baseUrl: mapPanel.baseUrl,
        graphName: mapPanel.graphName,
        roleName: getLastXString(node.data.id, 1),
        classId: parentNode.parentNode.data.identifier,
        index: parentNode.parentNode.indexOf(parentNode)
      },
      success: function () {
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onEditOrNewValueMap: function(item, e, options) {
    var me = this;
    var wintitle, contextName, endpoint, baseUrl, valueList, interName, classUrl, classLabel;
    var tree = this.getDirTree(),
    node = tree.getSelectedNode(),
    record = node.data.record;

    if(item.itemId == 'editvaluemap') {
      wintitle = 'Edit Value List \"' + node.data.text + '\"';
    } else {
      wintitle = 'Add new ValueListMap to valueList \"' + node.data.text + '\"';
    }

    if(node.data.record && node.data.type == 'ListMapNode') {
      interName = node.data.record.record.internalValue;
      classUrl = node.data.record.record.uri;
      classLabel = node.data.text.split('[')[0];
    }

    contextName = node.data.property.context;
    endpoint = node.data.property.endpoint;
    baseUrl = node.data.property.baseUrl;

    var arr = [];
    arr = node.data.id.split('ValueList');
    var arr1 = arr[arr.length - 1];
    valueList = arr1.split('/')[1];

    var win = Ext.widget('valuelistmapwindow', {
      id:'tab-' + node.data.id, title: wintitle
    });

    var formRecord = {
      'contextName': contextName,
      'endpoint': endpoint,
      'valueList': valueList,
      'baseUrl': baseUrl,
      'mappingNode': node.data.id,
      'internalName': interName,
      'classUrl': classUrl,
      'classLabel': classLabel,
      'oldClassUrl': classUrl
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);

    win.on('save', function () {
      win.close();
      tree.onReload();
      if (node.get('expanded') === false)
      node.expand();
    }, me);

    win.on('reset', function () {
      win.close();
    }, me);

    win.down('form').updateDDContainer(record);

    win.show();

  },

  onDeleteValueMap: function(item, e, options) {
    var me = this;
    var tree = me.getDirTree(),
    node = tree.getSelectedNode();

    Ext.Ajax.request({
      url: 'mapping/deleteValueMap',
      method: 'POST',
      params: {
        contextName: node.data.property.context,
        endpoint: node.data.property.endpoint,
        baseUrl: node.data.property.baseUrl,
        valueList: node.parentNode.data.property.Name,
        oldClassUrl: node.data.record.record.uri
      },
      success: function () {
        var parentNode = node.parentNode;                 
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () { }

    });
  },

  onResetMapping: function(item, e, options) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    var tree = mapPanel.down('mappingtree'),
    node = tree.getSelectedNode();

    me.getParentClass(node);
    Ext.Ajax.request({
      url: 'mapping/resetmapping',
      method: 'POST',
      params: {
        contextName: mapPanel.contextName,
        endpoint: mapPanel.endpoint,
        baseUrl: mapPanel.baseUrl,
        roleId: node.data.record.id,
        templateId: node.parentNode.data.record.id,
        parentClassId: node.parentNode.parentNode.data.identifier,
        graphName: mapPanel.graphName,
        index: node.parentNode.parentNode.indexOf(node.parentNode)
      },
      success: function () {
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onMapValueList: function(item, e, options) {
    var me = this;
    var mapPanel = content.down('mappingpanel');
    var tree = mapPanel.down('mappingtree'),
    node = tree.getSelectedNode();

    me.getParentClass(node);

    var win = Ext.widget('valuelistwindow');

    var formRecord = {
      'mappingNode': node,
      'index': node.parentNode.parentNode.indexOf(node.parentNode),
      'classId': me.parentClass,
      'graphName': mapPanel.graphName,
      'roleName': node.data.record.name,
      'contextName': mapPanel.contextName,
      'endpoint': mapPanel.endpoint,
      'baseUrl': mapPanel.baseUrl
    };

    var form = win.down('form');
    form.getForm().setValues(formRecord);

    win.on('Save', function () {
      win.destroy();
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.destroy();
    }, me);

    win.show();
  },

  onEditOrNewValueList: function(item, e, options) {
    var me = this; 
    var state, oldValueList, contextName, endpoint, baseUrl, valueList, wintitle;
    var tree = this.getDirTree(),
    node = tree.getSelectedNode();

    if(item.itemId == 'editvaluelist') {
      state = 'edit';
      valueList = node.data.record.record.name;
      wintitle = 'Edit Value List \"' + node.data.text + '\"';
    } else {
      state = 'new';
      wintitle = 'Add New ValueList';
    }

    var win = Ext.widget('valuelistwindow', {
      id: 'tab-' + node.data.id,
      title: wintitle
    });

    var formRecord = {
      'state': state,
      'oldValueList': valueList,
      'contextName': node.data.property.context,
      'endpoint': node.data.property.endpoint,
      'baseUrl': node.data.property.baseUrl,
      'valueList': valueList
    };

    var form = win.down('form').getForm();
    form.setValues(formRecord);

    win.on('save', function () {
      win.close();
      tree.onReload();
    }, me);

    win.on('reset', function () {
      win.close();
    }, me);

    win.show();

  },

  onMakePossessor: function(item, e, options) {
    var me = this;
    var content = me.getMainContent();
    var mapPanel = content.down('mappingpanel');
    var tree = mapPanel.down('mappingtree'),
    node = tree.getSelectedNode(), 
    parentNode = node.parentNode;

    Ext.Ajax.request({
      url: 'mapping/makePossessor',
      method: 'POST',
      params: {
        contextName: mapPanel.contextName,
        endpoint: mapPanel.endpoint,
        baseUrl: mapPanel.baseUrl,
        graphName: mapPanel.graphName,
        roleName: getLastXString(node.data.id, 1),
        classId: parentNode.parentNode.data.identifier,
        index: parentNode.parentNode.indexOf(parentNode)
      },
      success: function () {
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onDeleteGraphMap: function(item, e, options) {
    var me = this;
    var tree = me.getDirTree(),
    node = tree.getSelectedNode();

    Ext.Ajax.request({
      url: 'mapping/deletegraphmap',
      method: 'POST',
      params: {
        contextName: node.data.property.context,
        endpoint: node.data.property.endpoint,
        baseUrl: node.data.property.baseUrl,
        mappingNode: node.id,
        graphName: getLastXString(node.id, 1)
      },
      success: function () {
        var parentNode = node.parentNode;
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () { }
    });
  },

  onDeleteValueList: function(item, e, options) {
    var me = this;
    var tree = me.getDirTree(),
    node = tree.getSelectedNode(),
    parentNode = node.parentNode,
    valueList = getLastXString(node.id, 1);

    Ext.Ajax.request({
      url: 'mapping/deletevaluelist',
      method: 'POST',
      params: {
        contextName: node.data.property.context,
        endpoint: node.data.property.endpoint,
        baseUrl: node.data.property.baseUrl,
        valueList: valueList
      },
      success: function () {
        tree.getSelectionModel().select(parentNode);
        tree.onReload();
      },
      failure: function () { }
    });
  },

  getObjectType: function(type) {
    switch (type) {
      case 0:
      return 'Property';
      case 1:
      return 'Possessor';
      case 2:
      return 'Reference';
      case 3:
      return 'FixedValue';
      case 4:
      return 'DataProperty';
      case 5:
      return 'ObjectProperty';
    }
  },

  getParentClass: function(n) {
    var me = this;
    if ( n.parentNode !== null && n.parentNode !== undefined) {
      if ((n.parentNode.data.type == 'ClassMapNode' || 
      n.parentNode.data.type == 'GraphMapNode') && 
      n.parentNode.data.identifier !== undefined) {
        me.parentClass = n.parentNode.data.identifier;
        return me.parentClass;
      }
      else {
        me.getParentClass(n.parentNode);
      }
    }
    return me.parentClass;

  },

  init: function(application) {
    this.control({
      "menuitem[action=templatemapdelete]": {
        click: this.onDeleteTemplateMap
      },
      "menuitem[action=editnewgraph]": {
        click: this.onEditOrNewGraph
      },
      "menuitem[action=opengraph]": {
        click: this.openGraphMap
      },
      "menuitem[action=addclassmap]": {
        click: this.addClassMap
      },
      "menuitem[action=mapproperty]": {
        click: this.mapProperty
      },
      "menuitem[action=makereference]": {
        click: this.onMakeReference
      },
      "menuitem[action=editnewvaluemap]": {
        click: this.onEditOrNewValueMap
      },
      "menuitem[action=deletevaluemap]": {
        click: this.onDeleteValueMap
      },
      "menuitem[action=resetmapping]": {
        click: this.onResetMapping
      },
      "menuitem[action=mapvaluelist]": {
        click: this.onMapValueList
      },
      "menuitem[action=editnewvaluelist]": {
        click: this.onEditOrNewValueList
      },
      "menuitem[action=makepossessor]": {
        click: this.onMakePossessor
      },
      "menuitem[action=deletegraph]": {
        click: this.onDeleteGraphMap
      },
      "menuitem[action=deletevaluelist]": {
        click: this.onDeleteValueList
      }
    });
  }

});
