/*
 * File: Scripts/AM/view/nhibernate/SetRelationForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.nhibernate.SetRelationForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.setrelationform',

  bodyStyle: 'background:#eee;padding:10 0 0 10',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          cls: 'x-form-item',
          style: 'font-weight:bold;',
          text: 'Configure Relationship'
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          name: 'relationshipName',
          fieldLabel: 'Relationship Name',
          labelWidth: 160,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          name: 'objectName',
          readOnly: true,
          fieldLabel: 'Object Name',
          labelWidth: 160,
          allowBlank: false
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          name: 'relatedObjectName',
          fieldLabel: 'Related Object Name',
          labelWidth: 160,
          selectOnFocus: true,
          editable: false,
          queryMode: 'local',
          store: 'RelatedObjectStore',
          valueField: 'value',
          listeners: {
            select: {
              fn: me.onComboboxSelect,
              scope: me
            }
          }
        }
      ]
    });

    me.callParent(arguments);
  },

  onComboboxSelect: function(combo, records, options) {
    var relatedObjectName = record[0].data.text;

    if (relatedObjectName !== '') {
      var relatedDataObjectNode = rootNode.findChild('text', relatedObjectName);
      var relationConfigPanel = me.getForm();
      var mappingProperties = [];

      if (relatedDataObjectNode.childNodes[1]) {
        keysNode = relatedDataObjectNode.childNodes[0];
        propertiesNode = relatedDataObjectNode.childNodes[1];
        var ii = 0;

        for (var i = 0; i < keysNode.childNodes.length; i++) {
          mappingProperties.push([ii, keysNode.childNodes[i].data.text, keysNode.childNodes[i].data.property.columnName]);
          ii++;
        }

        for (var i = 0; i < propertiesNode.childNodes.length; i++) {
          mappingProperties.push([ii, propertiesNode.childNodes[i].data.text, propertiesNode.childNodes[i].data.property.columnName]);
          ii++;
        }
      }

      var mapCombo = relationConfigPanel.findField('mapPropertyName');

      if (mapCombo.store.data) {
        mapCombo.store.removeAll();
      }
      mapCombo.setValue(null);
      mapCombo.setRawValue(null);
      mapCombo.store.loadData(mappingProperties);
      var proxyData = findNodeRelatedObjMap(node, relatedObjectName);
      var dataGridPanel = me.items.items[7];
      var gridPane = dataGridPanel.items.items[0];
      var store = gridPane.store;

      if (store.data) {
        gridPane.store.removeAll();
      }

      gridPane.store.loadData(proxyData);
      dataGridPanel.doLayout();
      relationConfigPanel.findField('relatedTable').setValue(relatedDataObjectNode.data.property.tableName);
    }
  }

});