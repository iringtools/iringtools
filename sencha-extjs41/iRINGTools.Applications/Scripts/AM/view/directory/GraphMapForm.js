/*
 * File: Scripts/AM/view/directory/GraphMapForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.directory.GraphMapForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.graphmapform',

  frame: false,
  defaultType: 'textfield',
  bodyBorder: false,
  bodyStyle: 'padding:10px 5px 0',
  method: 'POST',
  url: 'mapping/graphMap',

  initComponent: function () {
    var me = this;

    me.addEvents(
      'save',
      'reset'
    );

    me.initialConfig = Ext.apply({
      method: 'POST',
      url: 'mapping/graphMap'
    }, me.initialConfig);

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'fieldset',
          hidden: true,
          layout: {
            type: 'fit'
          },
          items: [
            {
              xtype: 'hiddenfield',
              name: 'contextName'
            },
            {
              xtype: 'hiddenfield',
              name: 'endpoint'
            },
            {
              xtype: 'hiddenfield',
              name: 'oldGraphName'
            },
            {
              xtype: 'hiddenfield',
              name: 'baseUrl'
            },
            {
              xtype: 'hiddenfield',
              name: 'mappingNode'
            },
            {
              xtype: 'hiddenfield',
              name: 'objectName'
            },
            {
              xtype: 'hiddenfield',
              name: 'classLabel'
            },
            {
              xtype: 'hiddenfield',
              name: 'classUrl'
            },
            {
              xtype: 'hiddenfield',
              name: 'oldClassLabel'
            },
            {
              xtype: 'hiddenfield',
              name: 'oldClassUrl'
            },
            {
              xtype: 'hiddenfield',
              name: 'keyProperty'
            }
          ]
        },
        {
          xtype: 'textfield',
          name: 'graphName',
          fieldLabel: 'Graph Name',
          allowBlank: false,
          size: 30
        },
        {
          xtype: 'container',
          anchor: '100%',
          html: 'Drop a Property Node here.',
          itemId: 'gmfpcontainer',
          style: 'border:1px silver solid;margin:5px;padding:8px;height:40px',
          styleHtmlContent: true
        },
        {
          xtype: 'container',
          anchor: '100%',
          html: 'Drop a Class Node here.',
          itemId: 'gmfccontainer',
          style: 'border:1px silver solid;margin:5px;padding:8px;height:40px',
          styleHtmlContent: true
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onFormAfterRender,
          scope: me
        }
      },
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'bottom',
          items: [
            {
              xtype: 'tbfill'
            },
            {
              xtype: 'button',
              handler: function (button, event) {
                me.onSave();
              },
              text: 'Ok'
            },
            {
              xtype: 'button',
              handler: function (button, event) {
                me.onReset();
              },
              text: 'Cancel'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onFormAfterRender: function (abstractcomponent, options) {
    var me = this;
    var ptarget = me.down('#gmfpcontainer');
    var ctarget = me.down('#gmfccontainer');

    var propertyDd = new Ext.dd.DropTarget(ptarget.getEl(), {
      ddGroup: 'propertyGroup',
      notifyEnter: function (propertyDd, e, data) {
        if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode')
          return this.dropNotAllowed;
        else
          return this.dropAllowed;
      },
      notifyOver: function (propertyDd, e, data) {
        if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode')
          return this.dropNotAllowed;
        else
          return this.dropAllowed;
      },
      notifyDrop: function (propertyDd, e, data) {
        if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode') {
          return false;
        }
        else {
          var ident = getLastXString(data.records[0].data.id, 1);
          var object = getLastXString(data.records[0].data.id, 2);
          var key = getLastXString(data.records[0].data.id, 1);
          me.getForm().findField('objectName').setValue(object);
          var msg = 'Identifier: ' + ident;
          me.getForm().findField('keyProperty').setValue(key);
          ptarget.update(msg);
          return true;
        }
      }
    });

    var classdd = new Ext.dd.DropTarget(ctarget.getEl(), {
      ddGroup: 'refdataGroup',
      notifyEnter: function (classdd, e, data) {
        if (data.records[0].data.type != 'ClassNode')
          return this.dropNotAllowed;
        else
          return this.dropAllowed;
      },
      notifyOver: function (classdd, e, data) {
        if (data.records[0].data.type != 'ClassNode')
          return this.dropNotAllowed;
        else
          return this.dropAllowed;
      },
      notifyDrop: function (classdd, e, data) {
        if (data.records[0].data.type != 'ClassNode') {
          var message = 'Please slect a RDL Class...';
          showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
          return false;
        } else {
          var tempClassLabel = me.getForm().findField('classLabel').getValue();
          var tempClassUrl = me.getForm().findField('classUrl').getValue();
          if (tempClassLabel !== "") {
            me.getForm().findField('oldClassLabel').setValue(tempClassLabel);
            me.getForm().findField('oldClassUrl').setValue(tempClassUrl);
          }
          me.getForm().findField('classLabel').setValue(data.records[0].data.record.Label);
          me.getForm().findField('classUrl').setValue(data.records[0].data.record.Uri);
          var msg = 'Class Label: ' + data.records[0].data.record.Label;
          ctarget.update(msg);
          return true;
        }
      }
    });
  },

  updateDDContainers: function (record) {
    var me = this;
    var pcon = me.down('#gmfpcontainer');
    var ccon = me.down('#gmfccontainer');
    var identifier, label;
    if (record.record) {
      identifier = getLastXString(record.record.classTemplateMaps[0].classMap.identifiers[0], 1).split('.')[1];
      label = record.record.classTemplateMaps[0].classMap.name;
    } else {
      return true;
    }
    identifier = 'Identifier: ' + identifier;
    pcon.update(identifier);

    var classlabel = 'Class Label: ' + label;
    ccon.update(classlabel);
  },

  onReset: function () {
    var me = this;
    var win = me.up('window');
    win.fireEvent('reset', me);

  },

  onSave: function () {
    var me = this;
    var win = me.up('window');
    if (me.getForm().findField('objectName').getValue() === '' ||
    me.getForm().findField('graphName').getValue() === '' ||
    me.getForm().findField('classLabel').getValue() === '') {
      showDialog(400, 50, 'Warning', 'Please fill in every field in this form.', Ext.Msg.OK, null);
      return;
    }
    me.getForm().submit({
      success: function (f, a) {
        win.fireEvent('save', me);
      },
      failure: function (f, a) {
        var message = 'Error saving changes!';
        showDialog(400, 50, 'Warning', message, Ext.Msg.OK, null);
      }
    });
  }

});