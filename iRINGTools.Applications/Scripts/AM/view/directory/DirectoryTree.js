/*
 * File: Scripts/AM/view/directory/DirectoryTree.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.directory.DirectoryTree', {
  extend: 'Ext.tree.Panel',
  alias: 'widget.directorytree',

  stateId: 'directory-treestate',
  stateful: true,
  store: 'DirectoryTreeStore',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      stateEvents: [
        'itemcollapse',
        'itemexpand'
      ],
      viewConfig: {
        plugins: [
          Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
            ptype: 'treeviewdragdrop',
            dragField: 'text',
            ddGroup: 'propertyGroup',
            dragGroup: 'propertyGroup',
            dragText: '{0}',
            enableDrop: false
          })
        ]
      },
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'top',
          layout: {
            padding: 4,
            type: 'hbox'
          },
          items: [
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onReload();
              },
              iconCls: 'am-view-refresh',
              text: 'Reload Tree'
            }
          ]
        }
      ],
      listeners: {
        itemcontextmenu: {
          fn: me.showContextMenu,
          scope: me
        },
        itemclick: {
          fn: me.onClick,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  showContextMenu: function(tablepanel, record, item, index, e, options) {
    var me = this;
    e.stopEvent();
    node = record.store.getAt(index);

    me.getSelectionModel().select(node);
    me.onClick(tablepanel, record, 0, index, e);

    var obj = node.data;
    var ifsuperadmin = false;
    var useLdap = 'false';

    var securityRole = '';

    if (obj) {
      if (obj.record) {
        if (obj.record.securityRole) {
          securityRole = obj.record.securityRole;
        }
        else {
          ifsuperadmin = true;
        }
      }
    }

    // right clicks the root node
    if (index === 0) {
      Ext.Ajax.request({
        url: 'directory/UseLdap',
        method: 'GET',
        success: function (response, request) {
          useLdap = response.responseText;
          // when root node has children use securityRold of the first childNode
          if (node.childNodes[0]) {
            if (useLdap.toLowerCase().indexOf('true') > -1) {
              if (node.childNodes[0].data.record.securityRole) {
                securityRole = node.childNodes[0].data.record.securityRole;

                if (node.childNodes[0].data.record.securityRole.indexOf('rootadmin') > -1) {
                  ifsuperadmin = true;
                  var rootAdminScopesMenu = Ext.widget('rootadminscopesmenu');
                  rootAdminScopesMenu.showAt(e.getXY());
                }
                else if (securityRole.indexOf('admin') > -1) {
                  var groupAdminScopesMenu = Ext.widget('groupadminscopesmenu');
                  groupAdminScopesMenu.showAt(e.getXY());
                }
              }
            }
            else {
              ifsuperadmin = true;
              var noLdapScopesMenu = Ext.widget('noldapscopesmenu');
              noLdapScopesMenu.showAt(e.getXY());
            }
          }
          // when starting from scratch (root node has no children) using the rootNode's security
          else {
            if (useLdap === 'false') {
              var noLdapScopeMenu = Ext.widget('noldapscopesmenu');
              noLdapScopeMenu.showAt(e.getXY());
            }
            else {
              Ext.Ajax.request({
                url: 'directory/RootSecurityRole',
                method: 'GET',
                success: function (response, request) {
                  var rootSecurityRole = response.responseText;
                  if (rootSecurityRole.indexOf('rootadmin') > -1) {
                    ifsuperadmin = true;
                    var rootAdminScopesMenu = Ext.widget('rootadminscopesmenu');
                    rootAdminScopesMenu.showAt(e.getXY());
                  }
                  else if (securityRole.indexOf('admin') > -1) {
                    var groupAdminScopesMenu = Ext.widget('groupadminscopesmenu');
                  groupAdminScopesMenu.showAt(e.getXY());              }
                },
                failure: function () { }
              });
            }
          }
        },
        failure: function () { }
      });
    }
    //right clicks tree nodes which are not the root node
    else if (securityRole.indexOf('admin') > -1 || ifsuperadmin) {
      if (obj.type == "folder") {
        var scopeMenu = Ext.widget('scopemenu');
        scopeMenu.showAt(e.getXY());
      } else if (obj.type == "ApplicationNode") {
        var applicationMenu = Ext.widget('applicationmenu');
        applicationMenu.showAt(e.getXY());
      } else if (obj.type == "DataObjectNode") {
        var appDataMenu = Ext.widget('appdatamenu');  
        appDataMenu.showAt(e.getXY());
      } else if (obj.type == "ValueListsNode") {
        var valueListsMenu = Ext.widget('valuelistsmenu');
        valueListsMenu.showAt(e.getXY());
      } else if (obj.type == "ValueListNode") {
        var valueListMenu = Ext.widget('valuelistmenu');
        valueListMenu.showAt(e.getXY());
      } else if (obj.type == "ListMapNode") {
        var valueListMapMenu = Ext.widget('valuelistmapmenu');
        valueListMapMenu.showAt(e.getXY());
      } else if (obj.type == "GraphsNode") {
        var graphsMenu = Ext.widget('graphsmenu');
        graphsMenu.showAt(e.getXY());
      } else if (obj.type == "GraphNode") {
        var graphMenu = Ext.widget('graphmenu');
        graphMenu.showAt(e.getXY());
      }
    }
  },

  onClick: function(tablepanel, record, item, index, e, options) {
    var me = this;
    try {
      var obj = record.store.getAt(index);
      var pan = tablepanel.up('panel').up('panel'),
      prop = pan.down('propertygrid');
      prop.setSource(obj.data.property);
    } catch (e) {
      //  alert(e);
    }
  },

  getState: function() {
    var me = this;
    var nodes = [], state = me.callParent();
    me.getRootNode().eachChild(function (child) {
      // function to store state of tree recursively 
      var storeTreeState = function (node, expandedNodes) {
        if (node.isExpanded() && node.childNodes.length > 0) {
          expandedNodes.push(node.getPath('text'));

          node.eachChild(function (child) {
            storeTreeState(child, expandedNodes);
          });
        }
      };
      storeTreeState(child, nodes);
    });
    Ext.apply(state, {
      expandedNodes: nodes
    });
    return state;
  },

  applyState: function(state) {
    var me = this;
    var nodes = state.expandedNodes || [],
    len = nodes.length;
    me.collapseAll();
    Ext.each(nodes, function (path) {
      me.expandPath(path, 'text');
    });
    me.callParent(arguments);
  },

  onReload: function() {
    var me = this;
    var node = me.getSelectedNode();
    var store = me.store;

    if (!node)
    node = me.getRootNode();

    var path = node.getPath('text');
    store.load(node);
    if(node.isExpanded())
    node.collapse();
    me.expandPath(path, 'text');
  },

  getSelectedNode: function() {
    var me = this;
    var selected = me.getSelectionModel().getSelection();
    return selected[0];
  }

});