/*
 * File: Scripts/AM/view/mapping/PropertyMapForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.mapping.PropertyMapForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.propertymapform',

  bodyPadding: 10,
  method: 'POST',
  url: 'mapping/mapproperty',

  initComponent: function() {
    var me = this;

    me.addEvents(
      'reset',
      'save'
    );

    me.initialConfig = Ext.apply({
      method: 'POST',
      url: 'mapping/mapproperty'
    }, me.initialConfig);

    Ext.applyIf(me, {
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'bottom',
          items: [
            {
              xtype: 'tbfill'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onSave();
              },
              text: 'Ok'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                me.onReset();
              },
              text: 'Cancel'
            }
          ]
        }
      ],
      items: [
        {
          xtype: 'hiddenfield',
          name: 'propertyName'
        },
        {
          xtype: 'hiddenfield',
          name: 'graphName'
        },
        {
          xtype: 'hiddenfield',
          name: 'relatedObject'
        },
        {
          xtype: 'hiddenfield',
          name: 'roleName'
        },
        {
          xtype: 'hiddenfield',
          name: 'classId'
        },
        {
          xtype: 'hiddenfield',
          name: 'index'
        },
        {
          xtype: 'hiddenfield',
          name: 'contextName'
        },
        {
          xtype: 'hiddenfield',
          name: 'endpoint'
        },
        {
          xtype: 'hiddenfield',
          name: 'baseUrl'
        },
        {
          xtype: 'container',
          anchor: '100%',
          html: 'Drop a Property Node here.',
          itemId: 'pmfpcontainer',
          style: 'border:1px silver solid;margin:5px;padding:8px;height:40px',
          styleHtmlContent: true
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onFormAfterRender,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onFormAfterRender: function(abstractcomponent, options) {
    var me = this;
    var pcont = me.down('#pmfpcontainer');
    var propertyDropTarget = new Ext.dd.DropTarget(pcont.getEl(),{
      scope: me,
      ddGroup: 'propertyGroup',
      copy: false,
      overClass: 'over',
      notifyOver: function(dragSource, event, data){
        if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode')
        return this.dropNotAllowed;
        else
        return this.dropAllowed;
      },
      notifyDrop: function(dragSource, event, data){
        if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode') {
          return false;
        }
        else {
          me.getForm().findField('propertyName').setValue(data.records[0].data.record.Name);
          if (data.records[0].parentNode !== undefined && 
          data.records[0].parentNode.data.record !== undefined && 
          data.records[0].parentNode.data.type != 'DataObjectNode')
          me.getForm().findField('relatedObject').setValue(data.records[0].parentNode.data.record.Name);

          var msg = 'Property: ' + data.records[0].data.record.Name;
          pcont.update(msg);
          return true;
        }
      },
      notifyEnter: function(dd, e, data) {
        if (data.records[0].data.type != 'DataPropertyNode' && data.records[0].data.type != 'KeyDataPropertyNode')
        return this.dropNotAllowed;
        else
        return this.dropAllowed;
      }
    });
  },

  onReset: function() {
    var me = this;
    var win = me.up('window');
    me.getForm().reset();
    win.close();
  },

  onSave: function() {
    var me = this;
    var message;
    if(me.getForm().isValid()) {
      me.submit({
        waitMsg: 'Saving Data...',
        success: function (f, a) {

          me.fireEvent('Save', me);
        },
        failure: function (f, a) {
          message = 'Failed to map property';
          showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);
        }
      });
    } else {
      message = 'Form is not complete. Cannot save record.';
      showDialog(400, 100, 'Warning', message, Ext.Msg.OK, null);   
    }
  }

});