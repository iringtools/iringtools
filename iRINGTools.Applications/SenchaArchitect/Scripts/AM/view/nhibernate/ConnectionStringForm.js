/*
 * File: Scripts/AM/view/nhibernate/ConnectionStringForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.view.nhibernate.ConnectionStringForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.connectionstringform',

  baseUrl: '',
  dirNode: '',
  value: '',
  serName: '',
  bodyStyle: 'background:#eee;padding:10px 0px 0px 10px',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          anchor: '100%',
          cls: 'x-form-item',
          style: 'font-weight:bold',
          text: 'Configure Data Source'
        },
        {
          xtype: 'combobox',
          anchor: '100%',
          itemId: 'providerCombo',
          name: 'dbProvider',
          value: 'MsSql2008',
          fieldLabel: 'Database Provider',
          labelWidth: 150,
          editable: false,
          displayField: 'Provider',
          queryMode: 'local',
          store: 'ProviderStore',
          valueField: 'Provider'
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          name: 'dbServer',
          value: 'localhost',
          fieldLabel: 'Database Server',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: true,
          name: 'host',
          fieldLabel: 'Host Name',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: true,
          name: 'portNumber',
          value: 1433,
          fieldLabel: 'Port Number',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: false,
          name: 'dbInstance',
          value: 'default',
          fieldLabel: 'Database Instance',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: false,
          name: 'dbName',
          fieldLabel: 'Database Name',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: false,
          name: 'dbUserName',
          fieldLabel: 'User Name',
          labelWidth: 150,
          allowBlank: false,
          listeners: {
            change: {
              fn: me.onDbUserChange,
              scope: me
            }
          }
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: false,
          inputType: 'password',
          name: 'dbPassword',
          fieldLabel: 'Password',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'textfield',
          anchor: '100%',
          hidden: false,
          name: 'dbSchema',
          value: 'dbo',
          fieldLabel: 'Schema Name',
          labelWidth: 150,
          allowBlank: false
        },
        {
          xtype: 'container',
          hidden: true,
          itemId: 'oraclecontainer',
          layout: {
            type: 'column'
          },
          items: [
            {
              xtype: 'radiogroup',
              width: 25,
              columns: 1,
              items: [
                {
                  xtype: 'radiofield',
                  name: 'sid',
                  labelWidth: 125
                },
                {
                  xtype: 'radiofield',
                  name: 'sid',
                  inputValue: 'off'
                }
              ],
              listeners: {
                change: {
                  fn: me.onRadiogroupChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'textfield',
              columnWidth: 1,
              disabled: true,
              name: 'field_sid',
              fieldLabel: 'Sid',
              labelWidth: 125,
              allowBlank: false
            },
            {
              xtype: 'textfield',
              columnWidth: 1,
              disabled: true,
              name: 'field_serviceName',
              fieldLabel: 'Service Name',
              labelWidth: 125,
              allowBlank: false
            }
          ]
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'top',
          layout: {
            padding: 4,
            type: 'hbox'
          },
          items: [
            {
              xtype: 'button',
              setActiveRecord: function(record) {
                var me = this;
                if (record) {
                  me.getForm().setValues(record);
                } else {
                  me.getForm().reset();
                }
              },
              action: 'connecttodatabase',
              iconCls: 'am-document-properties',
              text: 'Connect',
              tooltip: 'Connect'
            },
            {
              xtype: 'tbseparator'
            },
            {
              xtype: 'button',
              iconCls: 'am-edit-clear',
              text: 'Reset',
              tooltip: 'Reset to the latest applied changes'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onDbUserChange: function(field, newValue, oldValue, options) {
    var me = this; 
    var dbProvider = me.getForm().findField('dbProvider').getValue().toUpperCase();
    if (dbProvider.indexOf('ORACLE') > -1) {
      var dbSchema = me.getForm().findField('dbSchema');
      dbSchema.setValue(newValue);
      dbSchema.show();
    }
  },

  onRadiogroupChange: function(field, newValue, oldValue, options) {
    var me = this; 
    var form = me.getForm();
    if (newValue) {
      var value = field.getValue().sid;
      if (value === 'on') {
        form.findField('field_serviceName').clearInvalid();
        form.findField('field_serviceName').disable();
        form.findField('field_sid').enable();
        form.findField('field_sid').focus();
        me.serName = 'SID';
      }
      else {
        form.findField('field_sid').clearInvalid();
        form.findField('field_sid').disable();
        form.findField('field_serviceName').enable();
        form.findField('field_serviceName').focus();
        me.serName = 'SERVICE_NAME';
      }
    }
  },

  setActive: function(record) {
    var me = this;
    if (record) {
      me.getForm().setValues(record);
    } else {
      me.getForm().reset();
    }
  }

});