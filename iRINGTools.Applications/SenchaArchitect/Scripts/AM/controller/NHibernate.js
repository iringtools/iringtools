/*
 * File: Scripts/AM/controller/NHibernate.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AM.controller.NHibernate', {
  extend: 'Ext.app.Controller',

  dataTypes: '',
  models: [
    'AvailItemsModel',
    'TableSelectModel',
    'RelationNameModel',
    'PropertyMapModel',
    'MultiSelect'
  ],
  stores: [
    'AvailItemsStore',
    'ProviderStore',
    'NHibernateTreeStore',
    'MultiStore',
    'RelatedObjectStore',
    'RelationsStore'
  ],
  views: [
    'nhibernate.ConnectionStringForm',
    'nhibernate.RelationsForm',
    'nhibernate.SelectTablesForm',
    'nhibernate.MultiSelectionGrid',
    'nhibernate.NhibernatePanel',
    'nhibernate.PropertyGrid',
    'nhibernate.DataObjectForm',
    'nhibernate.DataKeyForm',
    'nhibernate.NhibernateTree',
    'nhibernate.SelectPropertiesForm',
    'nhibernate.SelectDataKeysForm',
    'nhibernate.SetPropertyForm'
  ],

  refs: [
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'selectTablesForm',
      selector: 'selecttablesform',
      xtype: 'selecttablesform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'connectionStringForm',
      selector: 'connectionstringform',
      xtype: 'connectionstringform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'dataObjectForm',
      selector: 'dataobjectform',
      xtype: 'dataobjectform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'dataKeyForm',
      selector: 'datakeyform',
      xtype: 'datakeyform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'selectKeyFieldsForm',
      selector: 'selectdatakeysform',
      xtype: 'selectdatakeysform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'selectPropertiesForm',
      selector: 'selectpropertiesform',
      xtype: 'selectpropertiesform'
    },
    {
      autoCreate: true,
      forceCreate: true,
      ref: 'dataPropertyForm',
      selector: 'setpropertyform',
      xtype: 'setpropertyform'
    },
    {
      ref: 'dirTree',
      selector: 'viewport > directorypanel > directorytree',
      xtype: 'directorytree'
    },
    {
      ref: 'mainContent',
      selector: 'viewport > centerpanel > contentpanel',
      xtype: 'contentpanel'
    }
  ],

  onSaveDbObjectTree: function(button, e, options) {
    var me = this;
    var content = this.getMainContent();
    content.body.mask('Loading...', 'x-mask-loading');
    var nhPanel = button.up('nhibernatepanel');

    var dbObjectsTree = nhPanel.down('nhibernatetree');
    var gridSelected = dbObjectsTree.selectedTables;
    var dirNode = me.getDirNode(dbObjectsTree.dirNode);

    if(gridSelected.length === 0) {
      gridSelected = dirNode.data.record.dbInfo.dbTableNames.items;
    }
    var contextName = dirNode.data.record.context;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.BaseUrl;
    dirNode.data.record.dbInfo.dbProvider = dirNode.data.record.dbDict.Provider;
    var rootNode = dbObjectsTree.getRootNode();
    var treeProperty = me.getJsonTree(rootNode, dirNode, gridSelected);

    Ext.Ajax.request({
      url: 'NHibernate/Trees',
      timeout: 600000,
      method: 'POST',
      params: {
        scope: contextName,
        app: endpoint,
        baseUrl: baseUrl,
        tree: JSON.stringify(treeProperty)
      },
      success: function (response, request) {
        var rtext = response.responseText;
        var error = 'SUCCESS = FALSE';
        var index = rtext.toUpperCase().indexOf(error);
        if (index == -1) {
          showDialog(400, 100, 'Saving Result', 'Configuration has been saved successfully.', Ext.Msg.OK, null);
          var navpanel = me.getDirTree();
          navpanel.onReload();
          content.body.unmask();
        }
        else {
          var msg = rtext.substring(index + error.length + 2, rtext.length - 1);
          showDialog(400, 100, 'Saving Result - Error', msg, Ext.Msg.OK, null);
          content.body.unmask();
        }
      },
      failure: function (response, request) {
        showDialog(660, 300, 'Saving Result', 'An error has occurred while saving the configuration.', Ext.Msg.OK, null);
        content.body.unmask();
      }
    });
  },

  onSaveDataObject: function(button, e, options) {
    var me = this; 
    var form = button.up('dataobjectform');
    var panel = form.up('nhibernatepanel');
    var tree = panel.down('nhibernatetree');
    var treeNode = tree.getSelectedNode();
    var dirNode = me.getDirNode(tree.dirNode);
    var dbDict = dirNode.data.record.dbDict;
    var relationFolderNode;
    if (treeNode) {
      var treeNodeProps = treeNode.data.property;
      var objectNameField = form.getForm().findField('objectName');
      var objNam = objectNameField.getValue();

      if (objectNameField.validate())
      treeNodeProps.objectName = objNam;
      else {
        showDialog(400, 100, 'Warning', "Object Name is not valid. A valid object name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
        return;
      }

      var oldObjNam = treeNodeProps.objectName;
      treeNodeProps.tableName = form.getForm().findField('tableName').getValue();
      treeNodeProps.objectName = objNam;
      treeNodeProps.keyDelimiter = form.getForm().findField('keyDelimiter').getValue();
      treeNodeProps.description = form.getForm().findField('description').getValue();

      for (var ijk = 0; ijk < dbDict.dataObjects.length; ijk++) {
        var dataObject = dbDict.dataObjects[ijk];
        if (treeNode.data.text.toUpperCase() != dataObject.objectName.toUpperCase())
        continue;
        dataObject.objectName = objNam;
      }

      treeNode.set('text', objNam);
      var rootNode = tree.getRootNode();

      for (var i = 0; i < rootNode.childNodes.length; i++) {
        var folderNode = rootNode.childNodes[i];
        var folderNodeProp = folderNode.data.property;
        if (folderNode.childNodes[2])
        relationFolderNode = folderNode.childNodes[2];
        else
        relationFolderNode = folderNode.attributes.children[2];

        if (!relationFolderNode)
        continue;

        if (relationFolderNode.childNodes)
        var relChildenNodes = relationFolderNode.childNodes;
        else
        var relChildenNodes = relationFolderNode.children;

        if (relChildenNodes) {
          for (var k = 0; k < relChildenNodes.length; k++) {
            var relationNode = relChildenNodes[k];

            if (relationNode.text == '')
            continue;

            if (relationNode.data)
            var relationNodeAttr = relationNode.data

            var relObjNam = relationNodeAttr.relatedObjectName;
            if (relObjNam.toLowerCase() != objNam.toLowerCase() && relObjNam.toLowerCase() == oldObjNam.toLowerCase())
            relationNodeAttr.relatedObjectName = objNam;

            if (relationNodeAttr.relatedObjMap) {
              var relatedObjPropMap = relationNodeAttr.relatedObjMap;

              for (var iki = 0; iki < relatedObjPropMap.length; iki++) {
                if (relatedObjPropMap[iki].relatedObjName.toLowerCase() == oldObjNam.toLowerCase())
                relatedObjPropMap[iki].relatedObjName = objNam;
              }
            }
          }
        }
      }
    }
  },

  onResetDataObject: function(button, e, options) {
    var me = this;
    var form = button.up('dataobjectform');
    var panel = form.up('nhibernatepanel');
    var tree = panel.down('nhibernatetree');
    var dirNode = me.getDirNode(tree.dirNode);
    var dbDict = dirNode.data.record.dbDict;
    var treeNode = tree.getSelectedNode();
    var dObject;
    Ext.each(dbDict.dataObjects, function (dataObject) {
      if(dataObject.objectName == treeNode.data.property.objectName)
      dObject = dataObject;
    });

    if (treeNode.data.property) {
      form.getForm().findField('objectName').setValue(treeNode.data.record.Name);
      form.getForm().findField('objectNamespace').setValue(dObject.objectNamespace);
      form.getForm().findField('keyDelimiter').setValue(dObject.keyDelimeter);
      form.getForm().findField('description').setValue(dObject.description);
    }


    var nameField = form.getForm().findField('objectName');
    var objectName = nameField.getValue();

    if (nameField.validate()) {
      treeNode.data.property.objectName = objectName;
      treeNode.set('text', objectName);
    }

  },

  onSaveKeyProperties: function(button, e, options) {
    var me = this;
    var content = this.getMainContent();
    var panel = button.up('nhibernatepanel');
    var dbObjectsTree = panel.down('nhibernatetree');
    var treeStore = dbObjectsTree.getStore();
    var treeNode = treeStore.getNodeById(panel.treeNode.internalId);
    var rootNode = dbObjectsTree.getRootNode();
    var dirNode = me.getDirNode(dbObjectsTree.dirNode);
    var form = panel.down('selectdatakeysform');
    var objectGrid = form.down('multiselectiongrid');
    var selected = objectGrid.getSelectionModel().getSelection();
    var selectValues = [];
    Ext.each(selected, function(item) {
      selectValues.push(item.data.DisplayField);
    });

    var keysNode = panel.treeNode;
    var propertiesNode = keysNode.parentNode.childNodes[1];
    var hiddenRootNode = propertiesNode.raw.hiddenNodes.hiddenNode;

    for (var i = 0; i < keysNode.childNodes.length; i++) {
      var found = false;

      for (var j = 0; j < selectValues.length; j++) {
        if (selectValues[j].toLowerCase() == keysNode.childNodes[i].data.text.toLowerCase()) {
          found = true;
          break;
        }
      }

      if (!found) {
        if (keysNode.childNodes[i].data.property)
        var properties = keysNode.childNodes[i].data.property;

        if (properties) {
          properties.isNullable = true;
          delete properties.keyType;

          propertiesNode.appendChild({
            text: keysNode.childNodes[i].data.text,
            type: "dataProperty",
            leaf: true,
            iconCls: 'treeProperty',
            property: properties
          });

          keysNode.removeChild(keysNode.childNodes[i], false);
          i--;
        }
      }
    }

    var nodeChildren = [];
    for (var j = 0; j < keysNode.childNodes.length; j++)
    nodeChildren.push(keysNode.childNodes[j].data.text);

    for (var j = 0; j < selectValues.length; j++) {
      var found = false;
      for (var i = 0; i < nodeChildren.length; i++) {
        if (selectValues[j].toLowerCase() == nodeChildren[i].toLowerCase()) {
          found = true;
          break;
        }
      }
      var newKeyNode;
      if (!found) {


        for (var jj = 0; jj < propertiesNode.childNodes.length; jj++) {
          if (propertiesNode.childNodes[jj].data.text.toLowerCase() == selectValues[j].toLowerCase()) {
            var properties = propertiesNode.childNodes[jj].data.property;
            properties.keyType = 'assigned';
            properties.nullable = false;
            newKeyNode = {
              text: selectValues[j],
              type: "keyProperty",
              leaf: true,
              iconCls: 'treeKey',
              hidden: false,
              property: properties
            };
            keysNode.appendChild(newKeyNode);

            propertiesNode.removeChild(propertiesNode.childNodes[jj], false);
            break;
          }
        }

        for (var jj = 0; jj < hiddenRootNode.children.length; jj++) {
          if (hiddenRootNode.children[jj].text.toLowerCase() == selectValues[j].toLowerCase()) {
            var properties = hiddenRootNode.children[jj].property;
            properties.keyType = 'assigned';
            properties.nullable = false;
            newKeyNode = {
              text: selectValues[j],
              type: "keyProperty",
              leaf: true,
              iconCls: 'treeKey',
              hidden: false,
              property: properties
            };
            keysNode.appendChild(newKeyNode);
            hiddenRootNode.children.splice(jj, 1);
            jj--;
            break;
          }
        }
        newKeyNode.dirty = true;
      }
    }

    if (!keysNode.isExpanded())
    keysNode.expand();

  },

  onSaveDataProperties: function(button, e, options) {
    var me = this;
    var content = this.getMainContent();
    var panel = button.up('nhibernatepanel');
    var dbObjectsTree = panel.down('nhibernatetree');
    var treeStore = dbObjectsTree.getStore();
    var treeNode = treeStore.getNodeById(panel.treeNode.internalId);
    var rootNode = dbObjectsTree.getRootNode();
    var dirNode = me.getDirNode(dbObjectsTree.dirNode);
    var form = panel.down('selectpropertiesform');
    var objectGrid = form.down('multiselectiongrid');
    var selected = objectGrid.getSelectionModel().getSelection();
    var selectValues = [];
    Ext.each(selected, function(item) {
      selectValues.push(item.data.DisplayField);
    });

    var shownProperty = [];
    var availItems = [];
    var hiddenRootNode = treeNode.raw.hiddenNodes.hiddenNode;

    for (var indexOfProperty = 0; indexOfProperty < node.childNodes.length; indexOfProperty++) {
      !me.hasShown(shownProperty, node.childNodes[indexOfProperty].text)
      shownProperty.push(node.childNodes[indexOfProperty].text);
      indexOfProperty++;
    }

    var selectedItems = [];

    Ext.each(node.childNodes, function (node) {
      selectedItems.push(node.data.text);
    });

    Ext.each(hiddenRootNode.children, function (node) {
      availItems.push(node.text);
    });


    var hiddenRootNode = treeNode.raw.hiddenNodes.hiddenNode;
    var indexHidden;

    for (var i = 0; i < treeNode.childNodes.length; i++) {
      var found = false;

      for (var j = 0; j < selectValues.length; j++) {
        if (selectValues[j].toLowerCase() == treeNode.childNodes[i].data.text.toLowerCase()) {
          found = true;
          break;
        }
      }

      if (!found) {
        hiddenRootNode.children.push({
          text: treeNode.childNodes[i].data.text,
          property: treeNode.childNodes[i].data.property,
          hidden: true
        });
        treeNode.removeChild(treeNode.childNodes[i], false);
        i--;
      }
    }

    for (var j = 0; j < selectValues.length; j++) {
      found = false;

      for (var i = 0; i < treeNode.childNodes.length; i++) {
        if (selectValues[j].toLowerCase() == treeNode.childNodes[i].data.text.toLowerCase()) {
          found = true;
          break;
        }
      }

      for (var k = 0; k < hiddenRootNode.children.length; k++) {
        if (selectValues[j].toLowerCase() == hiddenRootNode.children[k].text.toLowerCase()) {
          indexHidden = k;
          break;
        }
      }

      if (!found && indexHidden > -1) {
        treeNode.appendChild({
          text: hiddenRootNode.children[indexHidden].text,
          property: hiddenRootNode.children[indexHidden].property,
          type: "dataProperty",
          hidden: false,
          leaf: true,
          iconCls: 'treeProperty'
        });
        hiddenRootNode.children.splice(indexHidden, 1);
      }
    } 
    if (!treeNode.isExpanded())
    treeNode.expand();


  },

  onEditDbConnection: function(button, e, options) {
    var me = this;
    var panel = button.up('nhibernatepanel');
    me.showConnectionStringForm(panel);
  },

  onResetKeyProperties: function(button, e, options) {
    alert('Not Implemented yet');
  },

  onSaveKeyProperty: function(button, e, options) {
    var me = this;
    form = button.up('datakeyform');
    var panel = form.up('nhibernatepanel');
    var tree = panel.down('nhibernatetree');
    var node = tree.getSelectedNode();
    var propertyNameField = form.getForm().findField('propertyName');
    var propertyName = propertyNameField.getValue();

    if (propertyNameField.validate()) {
      node.data.property.propertyName = propertyName;
      node.set('text', propertyName);
    }
    else {
      showDialog(400, 100, 'Warning', "Key Property Name is not valid. A valid key property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
    }         
  },

  onResetKeyProperty: function(button, e, options) {
    var me = this;
    form = button.up('datakeyform');
    var panel = form.up('nhibernatepanel');
    var tree = panel.down('nhibernatetree');
    var node = tree.getSelectedNode();
    var propertyNameField = form.getForm().findField('propertyName');
    propertyNameField.setValue(node.data.record.Name);
    var propertyName = propertyNameField.getValue();

    if (propertyNameField.validate()) {
      node.data.property.propertyName = propertyName;
      node.set('text', propertyName);
    }
    else {
      showDialog(400, 100, 'Warning', "Key Property Name is not valid. A valid key property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
    } 

  },

  onSaveDataProperty: function(button, e, options) {
    var me = this;
    form = button.up('setpropertyform');
    var panel = form.up('nhibernatepanel');
    var tree = panel.down('nhibernatetree');
    var node = tree.getSelectedNode();
    var propertyNameField = form.getForm().findField('propertyName');
    var propertyName = propertyNameField.getValue();

    if (propertyNameField.validate()) {
      node.data.property.propertyName = propertyName;
      node.set('text', propertyName);
    }
    else {
      showDialog(400, 100, 'Warning', "Property Name is not valid. A valid property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
    }         
  },

  onResetDataProperty: function(button, e, options) {
    var me = this;
    form = button.up('setpropertyform');
    var panel = form.up('nhibernatepanel');
    var tree = panel.down('nhibernatetree');
    var node = tree.getSelectedNode();
    var propertyNameField = form.getForm().findField('propertyName');
    propertyNameField.setValue(node.data.property.columnName);
    var propertyName = propertyNameField.getValue();

    if (propertyNameField.validate()) {
      node.data.property.propertyName = propertyName;
      node.set('text', propertyName);
    }
    else {
      showDialog(400, 100, 'Warning', "Property Name is not valid. A valid property name should start with alphabet or \"_\", and follow by any number of \"_\", alphabet, or number characters", Ext.Msg.OK, null);
    } 

  },

  onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
    var me = this;
    var panel = tablepanel.up('nhibernatepanel');
    var dataNode = record.store.getAt(index);
    panel.treeNode = dataNode;
    var nodeType = dataNode.data.type.toUpperCase();
    if (dataNode.isRoot()) {
      me.showSelectTablesForm(panel);
    }

    if (nodeType) {
      switch (nodeType) {
        case 'DATAOBJECT':
        me.showDataObjectForm(panel);
        break;
        case 'KEYS':
        me.showSelectKeyFieldsForm(panel);
        break;
        case 'KEYPROPERTY':
        me.showDataKeyForm(panel);
        break;
        case 'PROPERTIES':
        me.showSelectPropertiesForm(panel);
        break;
        case 'DATAPROPERTY':
        me.showDataPropertyForm(panel);
        break;
        case 'RELATIONSHIPS':
        //setRelations(editor, tree, dataNode, contextName, endpoint);
        break;
        case 'RELATIONSHIP':
        //setRelationFields(editor, rootNode, dataNode, contextName, endpoint);
        break;
      }
    }


  },

  onConnectToDatabase: function(button, e, options) {
    var me = this;
    var form = button.up('connectionstringform');
    var panel = form.up('nhibernatepanel');
    var dataTree = panel.down('nhibernatetree');
    var dirNode = me.getDirNode(dataTree.dirNode);
    var context = dirNode.data.record.context;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.BaseUrl;
    var content = me.getMainContent();
    var dbProvider = form.getForm().findField('dbProvider').getValue().toUpperCase();
    var dbName = form.getForm().findField('dbName');
    var portNumber = form.getForm().findField('portNumber');
    var host = form.getForm().findField('host');
    var dbServer = form.getForm().findField('dbServer');
    var dbInstance = form.getForm().findField('dbInstance');
    var serviceNamePane = form.items.items[10];
    var dbSchema = form.getForm().findField('dbSchema');
    var servieName = '';
    var serName = '';

    dirNode.data.record.dbDict.Provider = dbProvider;
    dirNode.data.record.dbDict.SchemaName = dbSchema.getValue();

    if (dbProvider.indexOf('ORACLE') > -1) {
      dbServer.setValue(host.getValue());
      dbName.setValue(dbSchema.getValue());
      servieName = serviceNamePane.items.items[0].value;
      serName = serviceNamePane.items.items[0].serName;
      dbInstance.setValue(servieName);
    }
    else if (dbProvider.indexOf('MSSQL') > -1) {
      host.setValue(dbServer.getValue());
      serviceName = dbInstance.getValue();
    }
    else if (dbProvider.indexOf('MYSQL') > -1) {
      dbName.setValue(dbSchema.getValue());
      dbInstance.setValue(dbSchema.getValue());
    }

    form.getForm().submit({
      url: 'nhibernate/TableNames',
      method: 'POST',
      timeout: 600000,
      params: {
        scope: context,
        app: endpoint,
        serName: serName,
        baseUrl: baseUrl
      },
      success: function (f, a) {
        dirNode.data.record.dbInfo = form.getForm().getValues();
        var dbInfo = dirNode.data.record.dbInfo;

        dbInfo.dbTableNames = Ext.JSON.decode(a.response.responseText);
        panel.dirNode = dirNode;

        me.showSelectTablesForm(panel);
        return;

      },
      failure: function (f, a) {
        if (a.response)
        showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
        else {
          showDialog(400, 100, 'Warning', 'Please fill in every field in this form.', Ext.Msg.OK, null);
        }
      }//,
      // waitMsg: 'Loading ...'
    });
  },

  onSaveDataObjects: function(button, e, options) {
    var me = this;
    var content = this.getMainContent();
    var panel = button.up('nhibernatepanel');
    var dbObjectsTree = panel.down('nhibernatetree');
    var dirNode = me.getDirNode(dbObjectsTree.dirNode);
    var rootNode = dbObjectsTree.getRootNode();
    var form = panel.down('selecttablesform');
    var objectGrid = form.down('multiselectiongrid');
    var selected = objectGrid.getSelectionModel().getSelection();

    var serName = '';
    var dbInfo = dirNode.data.record.dbInfo;
    var dbDict = dirNode.data.record.dbDict;
    dbInfo.dbSchema = dbDict.SchemaName;
    dbDict.enableSummary = form.getForm().findField('enableSummary').value;
    if (dbObjectsTree.disabled) {
      dbObjectsTree.enable();
    }

    if (dbInfo.serName)
    serName = dbInfo.serName;

    if (selected.length < 1) {
      while (rootNode.firstChild) {
        rootNode.removeChild(rootNode.firstChild);
      }
      showDialog(200, 100, 'Warning', 'No tables selected....', Ext.Msg.OK, null);
      return;
    } else {

      userTableNames = [];
      Ext.each(selected, function (table) {
        userTableNames.push(table.data.DisplayField);
      });
    }
    dbObjectsTree.selectedTables = userTableNames;

    var treeStore = dbObjectsTree.getStore();
    treeStore.on('beforeload', function (store, operation) {
      var params = store.proxy.extraParams;
      params.dbProvider = dbDict.Provider;
      params.dbServer = dbInfo.dbServer;
      params.dbInstance = dbInfo.dbInstance;
      params.dbName = dbInfo.dbName;
      params.dbSchema = dbInfo.dbSchema;
      params.dbPassword = dbInfo.dbPassword;
      params.dbUserName = dbInfo.dbUserName;
      params.portNumber = dbInfo.portNumber;
      params.tableNames = userTableNames;
      params.serName = serName;
      params.contextName = dirNode.data.record.context;
      params.endpoint = dirNode.data.record.endpoint;
      params.baseUrl = dirNode.data.record.BaseUrl;
    }, me);

    panel.body.mask('Loading...', 'x-mask-loading');
    treeStore.load();
    panel.body.unmask();
  },

  onResetDataObjects: function(button, e, options) {
    var me = this;
    var form = button.up('selecttablesform');
    var grid = form.down('multiselectiongrid');

    var panel = form.up('nhibernatepanel');
    var dataTree = panel.down('nhibernatetree');
    var dirNode = me.getDirNode(dataTree.dirNode);
    var dbInfo = dirNode.data.record.dbInfo;
    var dbDict = dirNode.data.record.dbDict;
    var rootNode = dataTree.getRootNode();
    var selectTableNamesSingle = [];
    var availTableName = [];
    var found = false;
    var repeatItem;
    for (var i = 0; i < dbInfo.dbTableNames.items.length; i++) {
      repeatItem = dbInfo.dbTableNames.items[i];
      availTableName.push([repeatItem, repeatItem]);
    }

    for (var j = 0; j < availTableName.length; j++)
    for (var i = 0; i < rootNode.childNodes.length; i++) {
      if (rootNode.childNodes[i].data.property.tableName.toLowerCase() == availTableName[j][0].toLowerCase()) {
        found = true;
        availTableName.splice(j, 1);
        j--;
        break;
      }
    }

    for (var i = 0; i < rootNode.childNodes.length; i++) {
      var nodeText = rootNode.childNodes[i].data.property.tableName;
      selectTableNamesSingle.push(nodeText);
    }

    grid.selectItems(selectTableNamesSingle);
  },

  onConfignhibernate: function() {
    var me = this;
    var dirTree = me.getDirTree(),
    dirNode = dirTree.getSelectedNode(),
    content = me.getMainContent();

    var dbDict, dbInfo, tree;

    var context = dirNode.data.record.context;
    var datalayer = dirNode.data.record.DataLayer;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.BaseUrl;
    var title = 'Nhibernate Configuration - ' + context + '.' + endpoint;

    var panel = content.down('nhibernatepanel[title='+title+']');

    if(!panel) {
      panel = Ext.widget('nhibernatepanel', {
        'title': title
      });  
      content.add(panel);

      tree = panel.down('nhibernatetree');

      tree.dirNode = dirNode.internalId;
      var treeStore = tree.getStore();
      var treeProxy = treeStore.getProxy();

      dbDict = me.getDbDictionary(context, endpoint, baseUrl, function(dbDict) { 
        if(dbDict.ConnectionString !== null) {
          var base64 = AM.view.nhibernate.Utility;
          dbDict.ConnectionString = base64.decode(dbDict.ConnectionString);
          if(dbDict) {
            var cstr = dbDict.ConnectionString;
            if(cstr) {
              dirNode.data.record.dbDict = dbDict;
              dbInfo = me.getConnStringParts(cstr, dirNode);
              var selectTableNames = me.setTableNames(dbDict);

              treeStore.on('beforeload', function (store, action) {
                var params = treeProxy.extraParams;
                params.dbProvider = dbDict.Provider;
                params.dbServer = dbInfo.dbServer;
                params.dbInstance = dbInfo.dbInstance;
                params.dbName = dbInfo.dbName;
                params.dbSchema = dbDict.SchemaName;
                params.dbPassword = dbInfo.dbPassword;
                params.dbUserName = dbInfo.dbUserName;
                params.portNumber = dbInfo.portNumber;
                params.tableNames = selectTableNames;
                params.serName = dbInfo.serName;
                params.contextName = context;
                params.endpoint = endpoint;
                params.baseUrl = baseUrl;
              }, me);

              treeStore.load();
              me.getTableNames(context, endpoint, baseUrl, dirNode);
            }
          }
        } else {
          if (dbInfo !== null && dbInfo !== undefined)
          dirNode.data.record.dbInfo = dbInfo;

          if (dbDict !== null && dbDict !== undefined)
          dirNode.data.record.dbDict = dbDict;
          me.showConnectionStringForm(panel);
          tree.disable();

        }
      });

    }
    me.getDataTypes();
    content.setActiveTab(panel);
  },

  init: function(application) {
    var me = this;
    me.application.addEvents('confignhibernate');

    this.control({
      "nhibernatepanel button[action=savedbobjectstree]": {
        click: this.onSaveDbObjectTree
      },
      "dataobjectform button[action=dataobjectformapply]": {
        click: this.onSaveDataObject
      },
      "dataobjectform button[action=dataobjectformreset]": {
        click: this.onResetDataObject
      },
      "selectdatakeysform button[action=saveselectkeys]": {
        click: this.onSaveKeyProperties
      },
      "selectpropertiesform button[action=saveselectproperties]": {
        click: this.onSaveDataProperties
      },
      "nhibernatetree button[action=editdbconnection]": {
        click: this.onEditDbConnection
      },
      "selectdatakeysform button[action=resetselectkeys]": {
        click: this.onResetKeyProperties
      },
      "button[action=savekeyfield]": {
        click: this.onSaveKeyProperty
      },
      "datakeyform button[action=resetkeyproperty]": {
        click: this.onResetKeyProperty
      },
      "setpropertyform button[action=savedataproperty]": {
        click: this.onSaveDataProperty
      },
      "setpropertyform button[action=resetdataproperty]": {
        click: this.onResetDataProperty
      },
      "nhibernatetree": {
        itemclick: this.onTreepanelItemClick
      },
      "button[action=connecttodatabase]": {
        click: this.onConnectToDatabase
      },
      "button[action=applyobjects]": {
        click: this.onSaveDataObjects
      },
      "selecttablesform button[action=resetobjects]": {
        click: this.onResetDataObjects
      }
    });

    application.on({
      confignhibernate: {
        fn: this.onConfignhibernate,
        scope: this
      }
    });
  },

  hasShown: function(shownArray, text) {
    for (var shownIndex = 0; shownIndex < shownArray.length; shownIndex++)
    if (shownArray[shownIndex] == text)
    return true;
    return false;
  },

  getDbDictionary: function(context, endpoint, baseUrl, successCallback) {
    var me = this;
    var dbDict, dbInfo;
    Ext.Ajax.request({
      url: 'NHibernate/DBDictionary',
      method: 'POST',
      timeout: 6000000,
      params: {
        scope: context,
        app: endpoint,
        baseUrl: baseUrl
      },
      success: function (response, request) {
        dbDict = Ext.JSON.decode(response.responseText);
        successCallback(dbDict);
      },
      failure: function (response, request) {
        //var dataObjPanel = content.items.map[contextName + '.' + endpoint + '.-nh-config'];;
      }
    });
  },

  getTableNames: function(context, endpoint, baseUrl, dirNode) {
    var me = this;
    var dbInfo = dirNode.data.record.dbInfo;
    var dbDict = dirNode.data.record.dbDict;

    Ext.Ajax.request({
      url: 'NHibernate/TableNames',
      method: 'POST',
      timeout: 6000000,
      params: {
        scope: context,
        app: endpoint,
        dbProvider: dbDict.Provider,
        dbServer: dbInfo.dbServer,
        dbInstance: dbInfo.dbInstance,
        dbName: dbInfo.dbName,
        dbSchema: dbDict.SchemaName,
        dbUserName: dbInfo.dbUserName,
        dbPassword: dbInfo.dbPassword,
        portNumber: dbInfo.portNumber,
        serName: dbInfo.serName,
        baseUrl: baseUrl
      },
      success: function (response, request) {
        dirNode.data.record.dbInfo.dbTableNames = Ext.JSON.decode(response.responseText);
      },
      failure: function (f, a) {
        if (a.response)
        showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
      }
    });
  },

  setTableNames: function(dbDict) {
    var selectTableNames = [];

    for (var i = 0; i < dbDict.dataObjects.length; i++) {
      var tableName = (dbDict.dataObjects[i].tableName ? dbDict.dataObjects[i].tableName : dbDict.dataObjects[i]);
      selectTableNames.push(tableName);
    }
    return selectTableNames;
  },

  getAvailableItems: function(node) {
    var availItems = [];
    var propertiesNode = node.parentNode.childNodes[1];

    for (var i = 0; i < propertiesNode.childNodes.length; i++) {
      var itemName = propertiesNode.childNodes[i].text;
      var found = false;

      for (var j = 0; j < node.childNodes.length; j++) {
        if (node.childNodes[j].text.toLowerCase() == itemName.toLowerCase()) {
          found = true;
          break;
        }
      }
      if (!found) {
        availItems.push([itemName, itemName]);
      }
    }
    return availItems;
  },

  getSelectedItems: function(node) {
    var selectedItems = [];
    var propertiesNode = node.parentNode.childNodes[1];

    for (var i = 0; i < node.childNodes.length; i++) {
      var keyName = node.childNodes[i].text;
      selectedItems.push([keyName, keyName]);
    }
    return selectedItems;

  },

  getSelectItems: function(node) {
    var selectItems = [];

    for (var i = 0; i < node.childNodes.length; i++) {
      var keyName = node.childNodes[i].data.text;
      selectItems.push(keyName);
    }

    return selectItems;
  },

  showSelectTablesForm: function(nhibernatePanel) {
    var me = this, 
    form = me.getSelectTablesForm();
    var dataTree = nhibernatePanel.down('nhibernatetree');
    var dirNode = me.getDirNode(dataTree.dirNode);
    var selected = [];
    var dict = dirNode.data.record.dbDict.dataObjects;
    Ext.each(dict, function(table) {
      selected.push(table.tableName);
    });
    var tables = dirNode.data.record.dbInfo.dbTableNames.items; 
    var grid = form.down('#tablesSelectionGrid');
    grid.loadItems(tables);

    grid.down('gridcolumn').setText('Select Data Tables');
    grid.selectItems(selected);
    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();
    panel.doLayout();

    panel.add(form);
    panel.doLayout();


  },

  showConnectionStringForm: function(nhibernatePanel) {
    var me = this,

    form = me.getConnectionStringForm();
    var dataTree = nhibernatePanel.down('nhibernatetree');

    var dirNode = me.getDirNode(dataTree.dirNode);

    var dbDict = dirNode.data.record.dbDict;
    var combo = form.down('#providerCombo');
    combo.on('select', function (combo, record, options) {
      var dbProvider = record[0].data.Provider.toUpperCase();
      var dbName = form.getForm().findField('dbName');
      var portNumber = form.getForm().findField('portNumber');
      var host = form.getForm().findField('host');
      var dbServer = form.getForm().findField('dbServer');
      var dbInstance = form.getForm().findField('dbInstance');
      var serviceName = form.down('#oraclecontainer');
      var dbSchema = form.getForm().findField('dbSchema');
      var userName = form.getForm().findField('dbUserName');
      var password = form.getForm().findField('dbPassword');
      var sid = form.getForm().findField('field_sid');
      var serName = form.getForm().findField('field_serviceName');

      if (dbProvider.indexOf('ORACLE') > -1) {
        if (dbName.hidden === false) {
          dbName.hide();
          dbServer.hide();
          dbInstance.hide();
        }

        if (host.hidden === true) {
          if (dbDict.Provider) {
            if (dbDict.Provider.toUpperCase().indexOf('ORACLE') > -1) {
              host.setValue(dbInfo.dbServer);
              sid.setValue(dbInfo.dbInstance);
              serName.setValue(dbInfo.serName);
              serviceName.show();
              host.show();
              userName.setValue(dbInfo.dbUserName);
              password.setValue(dbInfo.dbPassword);
              dbSchema.setValue(dbDict.SchemaName);
            }
            else
            me.resetConfigOracle(host, dbSchema, userName, password, serviceName, sid, serName);
          }
          else
          me.resetConfigOracle(host, dbSchema, userName, password, serviceName, sid, serName);

          portNumber.setValue('1521');
          portNumber.show();
        }
      }
      else if (dbProvider.indexOf('MSSQL') > -1) {
        if (host.hidden === false) {
          portNumber.hide();
          host.hide();
          sid.clearInvalid();
          sid.disable();
          serName.clearInvalid();
          serName.disable();
          serviceName.hide();
        }

        if (dbName.hidden === true) {
          if (dbDict.Provider) {
            if (dbDict.Provider.toUpperCase().indexOf('MSSQL') > -1) {
              dbName.setValue(dbInfo.dbName);
              dbServer.setValue(dbInfo.dbServer);
              dbInstance.setValue(dbInfo.dbInstance);
              dbName.show();
              dbServer.show();
              dbInstance.show();
              sid.clearInvalid();
              sid.disable();
              serName.clearInvalid();
              serName.disable();
              dbSchema.setValue(dbDict.SchemaName);
              userName.setValue(dbInfo.dbUserName);
              password.setValue(dbInfo.dbPassword);
            }
            else
            me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);
          }
          else
          me.resetConfigMsSql(dbName, dbServer, dbInstance, dbSchema, userName, password);
        }

        portNumber.setValue('1433');
      }
      else if (dbProvider.indexOf('MYSQL') > -1) {
        if (dbServer.hidden === true) {
          dbServer.setValue('');
          dbServer.clearInvalid();
          dbServer.show();
        }

        if (host.hidden === false) {
          portNumber.hide();
          host.hide();
          sid.clearInvalid();
          sid.disable();
          serName.clearInvalid();
          serName.disable();
          serviceName.hide();
          portNumber.setValue('3306');
        }

      }

    }, me);

    var cmbStore = combo.getStore();
    var cmbProxy = cmbStore.getProxy();
    cmbStore.on('beforeload', function(store, action) {
      cmbProxy.extraParams.baseUrl = node.data.record.BaseUrl;
    });
    cmbStore.load();

    form.setActive(dirNode.data.record.dbInfo);

    panel = nhibernatePanel.down('#nhibernateContent');
    panel.removeAll();
    panel.doLayout();
    panel.add(form);
  },

  showDataObjectForm: function(nhibernatePanel) {
    var me = this, 
    form = me.getDataObjectForm();
    var keyDelimiter;
    var dataTree = nhibernatePanel.down('nhibernatetree');
    var treeNode = dataTree.getSelectedNode();

    if (treeNode.data.property.keyDelimiter === 'null' || 
    !treeNode.data.property.keyDelimiter || treeNode.data.property.keyDelimiter === undefined) {
      keyDelimiter = '_';
    }   else {
      keyDelimiter = treeNode.data.property.keyDelimiter;
    }

    form.getForm().findField('tableName').setValue(treeNode.data.property.tableName);
    form.getForm().findField('objectNamespace').setValue(treeNode.data.property.objectNamespace);
    form.getForm().findField('objectName').setValue(treeNode.data.property.objectName);
    form.getForm().findField('keyDelimiter').setValue(keyDelimiter);

    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();

    panel.add(form);
    panel.doLayout();
  },

  getConnStringParts: function(connString, dirNode) {
    var me = this;
    var dsValue, serName;
    var connStrParts = connString.split(';');
    var dbDict = dirNode.data.record.dbDict;
    var provider = dbDict.Provider.toUpperCase();

    if (dirNode.data.record.dbInfo === undefined) {
      dirNode.data.record.dbInfo = {};
    }

    if (!dirNode.data.record.dbInfo.dbUserName)
    dirNode.data.record.dbInfo.dbName = dbDict.SchemaName;

    for (var i = 0; i < connStrParts.length; i++) {
      var pair = connStrParts[i].split('=');
      switch (pair[0].toUpperCase()) {
        case 'DATA SOURCE':
        if (provider.indexOf('MSSQL') > -1) {
          dsValue = pair[1].split('\\');
          dirNode.data.record.dbInfo.dbServer = (dsValue[0].toLowerCase() == '.' ? 'localhost' : dsValue[0]);
          dirNode.data.record.dbInfo.dbInstance = dsValue[1];
          dirNode.data.record.dbInfo.portNumber = 1433;
          dirNode.data.record.dbInfo.serName = '';
        }
        else if (provider.indexOf('MYSQL') > -1) {
          dirNode.data.record.dbInfo.dbServer = (pair[1].toLowerCase() == '.' ? 'localhost' : pair[1]);
          dirNode.data.record.dbInfo.portNumber = 3306;
        }
        else if (provider.indexOf('ORACLE') > -1) {
          var dsStr = connStrParts[i].substring(12, connStrParts[i].length);
          dsValue = dsStr.split('=');
          for (var j = 0; j < dsValue.length; j++) {
            dsValue[j] = dsValue[j].substring(dsValue[j].indexOf('(') + 1, dsValue[j].length);
            switch (dsValue[j].toUpperCase()) {
              case 'HOST':
              var server = dsValue[j + 1];
              var port = dsValue[j + 2];
              var index = server.indexOf(')');
              server = server.substring(0, index);
              dirNode.data.record.dbInfo.portNumber = port.substring(0, 4);
              dirNode.data.record.dbInfo.dbServer = (server.toLowerCase() == '.' ? 'localhost' : server);
              break;
              case 'SERVICE_NAME':
              serName = dsValue[j + 1];
              index = sername.indexOf(')');
              dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);
              dirNode.data.record.dbInfo.serName = 'SERVICE_NAME';
              break;
              case 'SID':
              serName = dsValue[j + 1];
              index = sername.indexOf(')');
              dirNode.data.record.dbInfo.dbInstance = serName.substring(0, index);
              dirNode.data.record.dbInfo.serName = 'SID';
              break;
            }
          }
        }
        break;
        case 'INITIAL CATALOG':
        dirNode.data.record.dbInfo.dbName = pair[1];
        break;
        case 'USER ID':
        dirNode.data.record.dbInfo.dbUserName = pair[1];
        break;
        case 'PASSWORD':
        dirNode.data.record.dbInfo.dbPassword = pair[1];
        break;
      }
    }
    return dirNode.data.record.dbInfo;
  },

  showSelectKeyFieldsForm: function(nhibernatePanel) {
    var me = this, 
    form = me.getSelectKeyFieldsForm();
    var selected = [];
    var dataTree = nhibernatePanel.down('nhibernatetree');
    var dataNode = dataTree.getSelectedNode();
    var dirNode = me.getDirNode(dataTree.dirNode);

    var context = dirNode.data.record.context;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.baseUrl;

    var grid = form.down('#multiSelectDataKeys');

    grid.down('gridcolumn').setText('Select Key Properties');

    var availItems = [];
    var propertiesNode = dataNode.parentNode.childNodes[1];
    var hiddenRootNode = propertiesNode.raw.hiddenNodes.hiddenNode;

    var selectItems = me.getSelectItems(dataNode);
    Ext.each(selectItems, function (item) {
      availItems.push(item);
    });

    Ext.each(hiddenRootNode.children, function(node) {
      availItems.push(node.text);
    });


    grid.loadItems(availItems);
    grid.selectItems(selectItems);
    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();

    panel.add(form);
    panel.doLayout();

    Ext.getBody().unmask();


  },

  showSelectPropertiesForm: function(nhibernatePanel) {
    var me = this, 
    form = me.getSelectPropertiesForm();
    var selected = [];
    var dataTree = nhibernatePanel.down('nhibernatetree');
    var dataNode = dataTree.getSelectedNode();
    var dirNode = me.getDirNode(dataTree.dirNode);

    var context = dirNode.data.record.context;
    var endpoint = dirNode.data.record.endpoint;
    var baseUrl = dirNode.data.record.baseUrl;

    var grid = form.down('#propertiesSelectionGrid');
    grid.down('gridcolumn').setText('Select Data Properties');

    var availItems = [];
    var propertiesNode = dataNode.parentNode.childNodes[1];
    var hiddenRootNode = propertiesNode.raw.hiddenNodes.hiddenNode;

    var selectItems = me.getSelectItems(dataNode);
    Ext.each(selectItems, function (item) {
      availItems.push(item);
    });

    Ext.each(hiddenRootNode.children, function(node) {
      availItems.push(node.text);
    });

    grid.loadItems(availItems);
    grid.selectItems(selectItems);
    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();

    panel.add(form);
    panel.doLayout();

    Ext.getBody().unmask();
  },

  showDataKeyForm: function(nhibernatePanel) {
    var me = this, 
    form = me.getDataKeyForm();

    var dataTree = nhibernatePanel.down('nhibernatetree');
    var dirNode = me.getDirNode(dataTree.dirNode);
    var treeNode = nhibernatePanel.treeNode;

    form.setActiveRecord(treeNode.data.property);

    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();

    panel.add(form);
    panel.doLayout();

    Ext.getBody().unmask();
  },

  getDirNode: function(nodeInternalId) {
    var me = this;
    var dirTree = me.getDirTree();
    var treeStore = dirTree.getStore();
    return treeStore.getNodeById(nodeInternalId);
  },

  showDataPropertyForm: function(nhibernatePanel) {
    var me = this, 
    form = me.getDataPropertyForm();

    var dataTree = nhibernatePanel.down('nhibernatetree');
    var dirNode = me.getDirNode(dataTree.dirNode);
    var treeNode = nhibernatePanel.treeNode;

    form.setActiveRecord(treeNode.data.property);

    panel = nhibernatePanel.down('#nhibernateContent');

    panel.removeAll();

    panel.add(form);
    panel.doLayout();

    Ext.getBody().unmask();
  },

  getJsonTree: function(rootNode, dirNode, selectedTables) {
    var me = this; 
    var treeProperty = {};
    treeProperty.dataObjects = [];
    treeProperty.IdentityConfiguration = null;
    var dbInfo = dirNode.data.record.dbInfo;
    var dbDict = dirNode.data.record.dbDict;
    var tProp = me.setTreeProperty(dbInfo, dbDict, selectedTables);
    treeProperty.connectionString = tProp.connectionString;
    if (treeProperty.connectionString !== null && treeProperty.connectionString.length > 0) {
      var base64 = AM.view.nhibernate.Utility;
      treeProperty.connectionString = base64.encode(tProp.connectionString);
    }
    treeProperty.schemaName = tProp.schemaName;
    treeProperty.provider = tProp.provider;
    treeProperty.enableSummary = tProp.enableSummary;

    var keyName;
    for (var i = 0; i < rootNode.childNodes.length; i++) {
      var folder = me.getFolderFromChildNode(rootNode.childNodes[i]);
      treeProperty.dataObjects.push(folder);
    }

    dbDict.ConnectionString = treeProperty.connectionString;
    dbDict.SchemaName = treeProperty.schemaName;
    dbDict.Provider = treeProperty.provider;
    dbDict.dataObjects = treeProperty.dataObjects;
    dbDict.enableSummary = treeProperty.enableSummary;
    return treeProperty;
  },

  setTreeProperty: function(dbInfo, dbDict, selected) {
    var me = this;
    var treeProperty = {};
    if (selected) {
      treeProperty.enableSummary = dbDict.enableSummary;
      treeProperty.provider = dbDict.Provider;
    }  else if (dbDict.enableSummary)
    treeProperty.enableSummary = dbDict.enableSummary;
    else
    treeProperty.enableSummary = false;

    if (dbInfo) {
      var dbServer = dbInfo.dbServer;
      dbServer = (dbServer.toLowerCase() == 'localhost' ? '.' : dbServer);
      var upProvider = treeProperty.provider.toUpperCase();
      var serviceName = '';
      var serName = '';
      if (dbInfo.serName) {
        serviceName = serviceNamePane.items.items[0].value;
        serName = serviceNamePane.items.items[0].serName;
      }
      else if (dbInfo) {
        if (dbInfo.dbInstance)
        serviceName = dbInfo.dbInstance;
        if (dbInfo.serName)
        serName = dbInfo.serName;
      }

      if (upProvider.indexOf('MSSQL') > -1) {
        var dbInstance = dbInfo.dbInstance;
        var dbDatabase = dbInfo.dbName;
        if (dbInstance.toUpperCase() == "DEFAULT") {
          var dataSrc = 'Data Source=' + dbServer + ';Initial Catalog=' + dbDatabase;
        } else {
          var dataSrc = 'Data Source=' + dbServer + '\\' + dbInstance + ';Initial Catalog=' + dbDatabase;
        }
      }
      else if (upProvider.indexOf('ORACLE') > -1)
      var dataSrc = 'Data Source=' + 
      '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' + 
      dbServer + ')(PORT=' + dbInfo.portNumber + 
      ')))(CONNECT_DATA=(SERVER=DEDICATED)(' + serName + '=' + serviceName + ')))';
      else if (upProvider.indexOf('MYSQL') > -1)
      var dataSrc = 'Data Source=' + dbServer;
      treeProperty.connectionString = dataSrc + ';User ID=' + dbInfo.dbUserName + ';Password=' + dbInfo.dbPassword;
      treeProperty.schemaName = dbDict.SchemaName;
    }
    else {
      treeProperty.provider = dbDict.Provider;
      var dbServer = dbInfo.dbServer;
      var upProvider = treeProperty.provider.toUpperCase();
      dbServer = (dbServer.toLowerCase() == 'localhost' ? '.' : dbServer);

      if (upProvider.indexOf('MSSQL') > -1) {
        if (dbInfo.dbInstance) {
          if (dbInfo.dbInstance.toUpperCase() == "DEFAULT") {
            var dataSrc = 'Data Source=' + dbServer + ';Initial Catalog=' + dbInfo.dbName;
          } else {
            var dataSrc = 'Data Source=' + dbServer + '\\' + dbInfo.dbInstance + ';Initial Catalog=' + dbInfo.dbName;
          }
        }
      }
      else if (upProvider.indexOf('ORACLE') > -1)
      var dataSrc = 'Data Source=' + '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=' + 
      dbServer + ')(PORT=' + dbInfo.portNumber + ')))(CONNECT_DATA=(SERVER=DEDICATED)(' + 
      dbInfo.serName + '=' + dbInfo.dbInstance + ')))';
      else if (upProvider.indexOf('MYSQL') > -1)
      var dataSrc = 'Data Source=' + dbServer;

      treeProperty.connectionString = dataSrc + ';User ID=' + dbInfo.dbUserName + ';Password=' + dbInfo.dbPassword;
      treeProperty.schemaName = dbDict.SchemaName;
    }
    return treeProperty;
  },

  getFolderFromChildNode: function(folderNode) {
    var me = this;
    var folderNodeProp = folderNode.data.property;
    var folder = {};
    var keyName = '';

    folder.tableName = folderNodeProp.tableName;
    folder.objectNamespace = folderNodeProp.objectNamespace;
    folder.objectName = folderNodeProp.objectName;
    folder.description = folderNodeProp.description;

    if (folderNodeProp.keyDelimiter && folderNodeProp.keyDelimiter != 'null')
    folder.keyDelimeter = folderNodeProp.keyDelimiter;    
    else
    folder.keyDelimeter = '_';

    folder.keyProperties = [];
    folder.dataProperties = [];
    folder.dataRelationships = [];

    for (var j = 0; j < folderNode.childNodes.length; j++) {
      if (folderNode.childNodes[1])
      var propertyFolderNode = folderNode.childNodes[1];    

      if (folderNode.childNodes[0])
      var keyFolderNode = folderNode.childNodes[0];   

      if (folderNode.childNodes[2])
      var relationFolderNode = folderNode.childNodes[2];   

      if (folderNode.childNodes[j])
      subFolderNodeText = folderNode.childNodes[j].data.text;

      switch (subFolderNodeText) {
        case 'Keys':
        if (keyFolderNode)
        var keyChildenNodes = keyFolderNode.childNodes;       

        for (var k = 0; k < keyChildenNodes.length; k++) {
          var keyNode = keyChildenNodes[k];          
          var keyProps = {};

          if (keyNode.data.property)
          var keyNodeProf = keyNode.data.property;         

          keyProps.keyPropertyName = keyNode.data.text;
          keyName = keyNode.data.text;
          folder.keyProperties.push(keyProps);
          var tagProps = {};
          tagProps.columnName = keyNodeProf.columnName;
          tagProps.propertyName = keyNode.data.text;

          if (typeof keyNodeProf.dataType == 'string')
          tagProps.dataType = me.getDataTypeIndex(keyNodeProf.dataType);
          else
          tagProps.dataType = keyNodeProf.dataType;

          tagProps.dataLength = keyNodeProf.dataLength;

          if (keyNodeProf.nullable)
          tagProps.isNullable = keyNodeProf.nullable.toString().toLowerCase();
          else
          tagProps.isNullable = 'false';

          tagProps.isHidden = 'false';

          if (!keyNodeProf.keyType)
          tagProps.keyType = 1;
          else
          if (typeof keyNodeProf.keyType != 'string')
          tagProps.keyType = keyNodeProf.keyType;
          else {
            switch (keyNodeProf.keyType.toLowerCase()) {
              case 'assigned':
              tagProps.keyType = 1;
              break;
              case 'unassigned':
              tagProps.keyType = 0;
              break;
              default:
              tagProps.keyType = 1;
              break;
            }
          }

          if (keyNodeProf.showOnIndex)
          tagProps.showOnIndex = keyNodeProf.showOnIndex.toString().toLowerCase();
          else
          tagProps.showOnIndex = 'false';

          tagProps.numberOfDecimals = keyNodeProf.numberOfDecimals;
          folder.dataProperties.push(tagProps);    
        }
        break;
        case 'Properties':
        if (folderNode.childNodes[1]) {
          var propChildenNodes = propertyFolderNode.childNodes;
          if(propChildenNodes.length > 0)
          folder = me.prepareProperties(folder, propChildenNodes, 'false', keyName);
        }
        break;
        case 'Relationships':
        if (!relationFolderNode)
        break;

        if (relationFolderNode.childNodes)
        var relChildenNodes = relationFolderNode.childNodes;       

        if (relChildenNodes)
        for (var k = 0; k < relChildenNodes.length; k++) {
          var relationNode = relChildenNodes[k];
          var found = false;
          for (var ik = 0; ik < folder.dataRelationships.length; ik++)
          if (relationNode.text.toLowerCase() == folder.dataRelationships[ik].relationshipName.toLowerCase()) {
            found = true;
            break;
          }

          if (found || relationNode.data.text === '')
          continue;

          relationNodeAttr = relationNode.data;
          var relation = {};
          relation.propertyMaps = [];

          for (var m = 0; m < relationNodeAttr.propertyMap.length; m++) {
            var propertyPairNode = relationNodeAttr.propertyMap[m];
            var propertyPair = {};

            propertyPair.dataPropertyName = propertyPairNode.dataPropertyName;
            propertyPair.relatedPropertyName = propertyPairNode.relatedPropertyName;
            relation.propertyMaps.push(propertyPair);
          }

          relation.relatedObjectName = relationNodeAttr.relatedObjectName;
          relation.relationshipName = relationNodeAttr.text;
          relation.relationshipType = relationNodeAttr.relationshipTypeIndex;
          folder.dataRelationships.push(relation);
        }
        break;
      }
    }
    return folder;
  },

  prepareProperties: function(folder, propChildNodes, ifHidden, keyName) {
    var me = this;
    var hasData = false;
    if(propChildNodes.length === 0) return folder;
    for (var k = 0; k < propChildNodes.length; k++) {
      var propertyNode = propChildNodes[k];

      if (propertyNode.data !== undefined) {
        if (propertyNode.data.property !== undefined) {
          var propertyNodeProf = propertyNode.data.property;
          hasData = true;
        }
      }

      if (!hasData)
      var propertyNodeProf = propertyNode.property;

      var props = {};
      props.columnName = propertyNodeProf.columnName;
      props.propertyName = propertyNodeProf.propertyName;

      if (typeof propertyNodeProf.dataType.toLowerCase() == 'string')
      props.dataType = me.getDataTypeIndex(propertyNodeProf.dataType);
      else
      props.dataType = propertyNodeProf.dataType;

      props.dataLength = propertyNodeProf.dataLength;

      if (propertyNodeProf.nullable)
      props.isNullable = propertyNodeProf.nullable.toString().toLowerCase();
      else
      props.isNullable = 'false';

      if (keyName !== '') {
        if (props.columnName == keyName)
        props.keyType = 1;
        else
        props.keyType = 0;
      }
      else
      props.keyType = 0;

      if (propertyNodeProf.showOnIndex)
      props.showOnIndex = propertyNodeProf.showOnIndex.toString().toLowerCase();
      else
      props.showOnIndex = 'false';

      props.isHidden = ifHidden;
      props.numberOfDecimals = propertyNodeProf.numberOfDecimals;
      folder.dataProperties.push(props);
    }
    return folder;
  },

  getDataTypeIndex: function(dataType) {
    var me = this;
    if (me.dataTypes === undefined)
    return;

    var i = 0;

    while (me.dataTypes[i] === undefined)
    i++;

    for (var k = i; k < me.dataTypes.length; k++) {
      if (me.dataTypes[k][1] == dataType)
      return me.dataTypes[k][0];
    }
  },

  getDataTypes: function() {
    var me = this;
    Ext.Ajax.request({
      url: 'NHibernate/DataType',
      method: 'GET',
      timeout: 6000000,
      success: function (response, request) {
        var dataTypeName = Ext.JSON.decode(response.responseText);
        me.dataTypes = [];
        var i = 0;
        while (!dataTypeName[i])
        i++;
        while (dataTypeName[i]) {
          me.dataTypes.push([i, dataTypeName[i]]);
          i++;
        }
      },
      failure: function (f, a) {
        if (a.response)
        showDialog(500, 400, 'Error', a.response.responseText, Ext.Msg.OK, null);
      }
    });
  },

  resetConfigOracle: function(host, dbSchema, userName, password, serviceName, sid, serName) {
    host.setValue('');
    host.clearInvalid();

    host.show();

    dbSchema.setValue('');
    dbSchema.clearInvalid();

    userName.setValue('');
    userName.clearInvalid();

    password.setValue('');
    password.clearInvalid();
    serviceName.show();

    sid.setValue('');
    sid.clearInvalid();

    sid.setValue('');
    sid.clearInvalid(); 
  },

  resetConfigMsSql: function(dbName, dbServer, dbInstance, dbSchema, userName, password) {
    dbName.setValue('');
    dbName.clearInvalid();
    dbName.show();

    dbServer.setValue('localhost');
    dbServer.show();

    dbInstance.setValue('default');
    dbInstance.show();

    dbSchema.setValue('dbo');

    userName.setValue('');
    userName.clearInvalid();

    password.setValue('');
    password.clearInvalid();
  }

});
